
fan_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  000029aa  00002a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001cc  008001cc  00002baa  2**0
                  ALLOC
  3 .stab         00002508  00000000  00000000  00002bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001438  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000064ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000668c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000687e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a00f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b69e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3d       	cpi	r26, 0xD1	; 209
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <main>
      8a:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa eb       	ldi	r26, 0xBA	; 186
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 14 	jmp	0x290e	; 0x290e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a eb       	ldi	r24, 0xBA	; 186
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 14 	jmp	0x290e	; 0x290e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a eb       	ldi	r22, 0xBA	; 186
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 53       	subi	r30, 0x3E	; 62
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:

/*
 * @brief will be called once the ADC module finish reading a channel
 * */
ISR(ADC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	/*ADC flag is being cleared automatically*/

	if(ADC_g_digitalValue != NULL_PTR && ADC_g_doneFlag != NULL_PTR )
     e4c:	80 91 cc 01 	lds	r24, 0x01CC
     e50:	90 91 cd 01 	lds	r25, 0x01CD
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	f9 f0       	breq	.+62     	; 0xe96 <__vector_16+0x68>
     e58:	80 91 ce 01 	lds	r24, 0x01CE
     e5c:	90 91 cf 01 	lds	r25, 0x01CF
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	c9 f0       	breq	.+50     	; 0xe96 <__vector_16+0x68>
	{
		/*To prevent a run-time error is some cases */
		*ADC_g_digitalValue = ADC; /*save the digital value in the user passed variable */
     e64:	a0 91 cc 01 	lds	r26, 0x01CC
     e68:	b0 91 cd 01 	lds	r27, 0x01CD
     e6c:	e4 e2       	ldi	r30, 0x24	; 36
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	11 96       	adiw	r26, 0x01	; 1
     e76:	9c 93       	st	X, r25
     e78:	8e 93       	st	-X, r24
		*ADC_g_doneFlag = ADC_CONVERSION_COMPLETED;/*Mark the users flag as COMPLETED*/
     e7a:	e0 91 ce 01 	lds	r30, 0x01CE
     e7e:	f0 91 cf 01 	lds	r31, 0x01CF
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24

		ADC_g_doneFlag = NULL_PTR;/*Reset the global flag to NULL to be used next time*/
     e86:	10 92 cf 01 	sts	0x01CF, r1
     e8a:	10 92 ce 01 	sts	0x01CE, r1
		ADC_g_digitalValue = NULL_PTR; /*Reset the pointer for next usage*/
     e8e:	10 92 cd 01 	sts	0x01CD, r1
     e92:	10 92 cc 01 	sts	0x01CC, r1
	}

}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <ADC_init>:
 * @param a_config contain the dynamic configuration for the module
 *
 * @return void
 * */
void ADC_init(const ADC_configType * a_config)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <ADC_init+0x6>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Apply the selected vref.
	 * Clear channel selecting bits.
	 * Clear adjust left
	 * */
	ADMUX = (a_config->vref << REFS0);
     ebe:	a7 e2       	ldi	r26, 0x27	; 39
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e9 81       	ldd	r30, Y+1	; 0x01
     ec4:	fa 81       	ldd	r31, Y+2	; 0x02
     ec6:	80 81       	ld	r24, Z
     ec8:	82 95       	swap	r24
     eca:	88 0f       	add	r24, r24
     ecc:	88 0f       	add	r24, r24
     ece:	80 7c       	andi	r24, 0xC0	; 192
     ed0:	8c 93       	st	X, r24
	/*
	 * ADC Enable
	 * Apply the selected prescaler
	 * Apply the working mode (polling or interrupt)
	 * */
	ADCSRA = (1 << ADEN) | (a_config->prescaler << ADPS0) | (a_config->mode << ADIE);
     ed2:	a6 e2       	ldi	r26, 0x26	; 38
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e9 81       	ldd	r30, Y+1	; 0x01
     ed8:	fa 81       	ldd	r31, Y+2	; 0x02
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	28 2f       	mov	r18, r24
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	82 2b       	or	r24, r18
     ef8:	8c 93       	st	X, r24

	if(a_config->mode == ADC_INTERRUPT)
     efa:	e9 81       	ldd	r30, Y+1	; 0x01
     efc:	fa 81       	ldd	r31, Y+2	; 0x02
     efe:	81 81       	ldd	r24, Z+1	; 0x01
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	39 f4       	brne	.+14     	; 0xf12 <ADC_init+0x62>
	{
		/*To ensure interrupt compatibility*/

		SREG |= (1 << SREG_I);/*Set the i-bit*/
     f04:	af e5       	ldi	r26, 0x5F	; 95
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ef e5       	ldi	r30, 0x5F	; 95
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 68       	ori	r24, 0x80	; 128
     f10:	8c 93       	st	X, r24
	}

	ADC_g_initialized = TRUE;/*Used for error checking*/
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 d0 01 	sts	0x01D0, r24

}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <ADC_Deinit>:
 * @brief undo the initialization on the ADC module
 *
 * @return void
 * */
void ADC_Deinit(void)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0; /*Clearing the selected vref*/
     f2a:	e7 e2       	ldi	r30, 0x27	; 39
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	10 82       	st	Z, r1
	ADCSRA = 0; /*Disabling the ADC module*/
     f30:	e6 e2       	ldi	r30, 0x26	; 38
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	10 82       	st	Z, r1
	ADC_g_digitalValue = NULL_PTR;/*reset to the initial value */
     f36:	10 92 cd 01 	sts	0x01CD, r1
     f3a:	10 92 cc 01 	sts	0x01CC, r1
	ADC_g_doneFlag = NULL_PTR;/*reset to the initial value */
     f3e:	10 92 cf 01 	sts	0x01CF, r1
     f42:	10 92 ce 01 	sts	0x01CE, r1
	ADC_g_initialized = FALSE;/*reset to the initial value */
     f46:	10 92 d0 01 	sts	0x01D0, r1
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <ADC_isInitialized>:
 *
 * @return uint8 TRUE or FALSE based on ADC_initialized value
 *
 * */
uint8 ADC_isInitialized(void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
	/*This function provide a read-only on ADC_g_initialized for upper modules to handle errors */
	/*Also, To ensure reliability that only the ADC module will init this variable */
    return ADC_g_initialized;
     f58:	80 91 d0 01 	lds	r24, 0x01D0
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <ADC_isPolling>:
 *
 * @return uint8 FALSE if ht mode is interrupt
 *
 * */
uint8 ADC_isPolling(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(ADCSRA, ADIE) == 0? TRUE:FALSE;
     f6c:	e6 e2       	ldi	r30, 0x26	; 38
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	88 70       	andi	r24, 0x08	; 8
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	95 95       	asr	r25
     f7c:	87 95       	ror	r24
     f7e:	95 95       	asr	r25
     f80:	87 95       	ror	r24
     f82:	95 95       	asr	r25
     f84:	87 95       	ror	r24
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	19 f4       	brne	.+6      	; 0xf90 <ADC_isPolling+0x2e>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <ADC_isPolling+0x30>
     f90:	19 82       	std	Y+1, r1	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
}
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <ADC_readChannelPolling>:
 * @param a_result a pointer to the result variable
 *
 * @return uint8 to indicate the an error or a SUCCESS of the process.
 * */
uint8 ADC_readChannelPolling(uint8 a_channel, uint8 * a_doneFlag, uint16 * a_result)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <ADC_readChannelPolling+0x6>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <ADC_readChannelPolling+0x8>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <ADC_readChannelPolling+0xa>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	7b 83       	std	Y+3, r23	; 0x03
     fae:	6a 83       	std	Y+2, r22	; 0x02
     fb0:	5d 83       	std	Y+5, r21	; 0x05
     fb2:	4c 83       	std	Y+4, r20	; 0x04
	/*validate the configurations*/
	if(ADC_g_initialized == FALSE)
     fb4:	80 91 d0 01 	lds	r24, 0x01D0
     fb8:	88 23       	and	r24, r24
     fba:	19 f4       	brne	.+6      	; 0xfc2 <ADC_readChannelPolling+0x26>
	{
		/*ADC module was not initialized */
		return ADC_ERROR_NOT_INIT;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	8e 83       	std	Y+6, r24	; 0x06
     fc0:	52 c0       	rjmp	.+164    	; 0x1066 <ADC_readChannelPolling+0xca>
	}
	if(ADC_isPolling() == FALSE)
     fc2:	0e 94 b1 07 	call	0xf62	; 0xf62 <ADC_isPolling>
     fc6:	88 23       	and	r24, r24
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <ADC_readChannelPolling+0x34>
	{
		/*the user is trying to use interrupt mode with polling mode*/
		return ADC_ERROR_WRONG_MODE;
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	8e 83       	std	Y+6, r24	; 0x06
     fce:	4b c0       	rjmp	.+150    	; 0x1066 <ADC_readChannelPolling+0xca>
	}

	/*Validate user input*/
	if(a_channel >= ADC_CHANNELS)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	18 f0       	brcs	.+6      	; 0xfdc <ADC_readChannelPolling+0x40>
	{
		/*User sent wrong channel */
		return ADC_ERROR_WRONG_CHANNEL;
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	8e 83       	std	Y+6, r24	; 0x06
     fda:	45 c0       	rjmp	.+138    	; 0x1066 <ADC_readChannelPolling+0xca>
	}
	if(a_doneFlag == NULL_PTR || a_result == NULL_PTR)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	21 f0       	breq	.+8      	; 0xfec <ADC_readChannelPolling+0x50>
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	19 f4       	brne	.+6      	; 0xff2 <ADC_readChannelPolling+0x56>
	{
		/*The user sent a null pointer*/
		return ADC_ERROR_NULL_PTR;
     fec:	84 e0       	ldi	r24, 0x04	; 4
     fee:	8e 83       	std	Y+6, r24	; 0x06
     ff0:	3a c0       	rjmp	.+116    	; 0x1066 <ADC_readChannelPolling+0xca>
	}
	ADMUX = (ADMUX & 0xE0) | (a_channel & 0x1F) ; /*Selecting the channel from the argument*/
     ff2:	a7 e2       	ldi	r26, 0x27	; 39
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e2       	ldi	r30, 0x27	; 39
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	98 2f       	mov	r25, r24
     ffe:	90 7e       	andi	r25, 0xE0	; 224
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	8f 71       	andi	r24, 0x1F	; 31
    1004:	89 2b       	or	r24, r25
    1006:	8c 93       	st	X, r24
	*a_doneFlag = ADC_CONVERSION_STARTED;	/*Indicate the conversion starting*/
    1008:	ea 81       	ldd	r30, Y+2	; 0x02
    100a:	fb 81       	ldd	r31, Y+3	; 0x03
    100c:	10 82       	st	Z, r1
	SET_BIT(ADCSRA,  ADSC);/*starting the adc*/
    100e:	a6 e2       	ldi	r26, 0x26	; 38
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e6 e2       	ldi	r30, 0x26	; 38
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA, ADIF) == 0); /* polling until the reading is over*/
    101c:	e6 e2       	ldi	r30, 0x26	; 38
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	80 71       	andi	r24, 0x10	; 16
    1028:	90 70       	andi	r25, 0x00	; 0
    102a:	95 95       	asr	r25
    102c:	87 95       	ror	r24
    102e:	95 95       	asr	r25
    1030:	87 95       	ror	r24
    1032:	95 95       	asr	r25
    1034:	87 95       	ror	r24
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	79 f3       	breq	.-34     	; 0x101c <ADC_readChannelPolling+0x80>
	SET_BIT(ADCSRA, ADIF); /*Clear the ADC flag by writing 1 to it*/
    103e:	a6 e2       	ldi	r26, 0x26	; 38
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e6 e2       	ldi	r30, 0x26	; 38
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 61       	ori	r24, 0x10	; 16
    104a:	8c 93       	st	X, r24
	*a_doneFlag = ADC_CONVERSION_COMPLETED;
    104c:	ea 81       	ldd	r30, Y+2	; 0x02
    104e:	fb 81       	ldd	r31, Y+3	; 0x03
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	80 83       	st	Z, r24
	*a_result = ADC; /*save the read value*/
    1054:	e4 e2       	ldi	r30, 0x24	; 36
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	ec 81       	ldd	r30, Y+4	; 0x04
    105e:	fd 81       	ldd	r31, Y+5	; 0x05
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
	return ADC_SUCCESS;/*The function handled the request successfully*/
    1064:	1e 82       	std	Y+6, r1	; 0x06
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1068:	26 96       	adiw	r28, 0x06	; 6
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <ADC_readChannelInterrupt>:
 * @param a_result a pointer to the result variable
 *
 * @return uint8 to indicate the an error or a SUCCESS of the process.
 * */
uint8 ADC_readChannelInterrupt(uint8 a_channel, uint8 * a_doneFlag, uint16 * a_result)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <ADC_readChannelInterrupt+0x6>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <ADC_readChannelInterrupt+0x8>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <ADC_readChannelInterrupt+0xa>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	7b 83       	std	Y+3, r23	; 0x03
    108c:	6a 83       	std	Y+2, r22	; 0x02
    108e:	5d 83       	std	Y+5, r21	; 0x05
    1090:	4c 83       	std	Y+4, r20	; 0x04
	/*validate the configurations*/
	if(ADC_g_initialized == FALSE)
    1092:	80 91 d0 01 	lds	r24, 0x01D0
    1096:	88 23       	and	r24, r24
    1098:	19 f4       	brne	.+6      	; 0x10a0 <ADC_readChannelInterrupt+0x26>
	{
		/*ADC module was not initialized */
		return ADC_ERROR_NOT_INIT;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8e 83       	std	Y+6, r24	; 0x06
    109e:	3c c0       	rjmp	.+120    	; 0x1118 <ADC_readChannelInterrupt+0x9e>
	}
	if(ADC_isPolling() == FALSE)
    10a0:	0e 94 b1 07 	call	0xf62	; 0xf62 <ADC_isPolling>
    10a4:	88 23       	and	r24, r24
    10a6:	19 f4       	brne	.+6      	; 0x10ae <ADC_readChannelInterrupt+0x34>
	{
		/*the user is trying to use interrupt mode with polling mode*/
		return ADC_ERROR_WRONG_MODE;
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	8e 83       	std	Y+6, r24	; 0x06
    10ac:	35 c0       	rjmp	.+106    	; 0x1118 <ADC_readChannelInterrupt+0x9e>
	}

	/*Validate user input*/
	if(a_channel >= ADC_CHANNELS)
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 30       	cpi	r24, 0x08	; 8
    10b2:	18 f0       	brcs	.+6      	; 0x10ba <ADC_readChannelInterrupt+0x40>
	{
		/*User sent wrong channel */
		return ADC_ERROR_WRONG_CHANNEL;
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	8e 83       	std	Y+6, r24	; 0x06
    10b8:	2f c0       	rjmp	.+94     	; 0x1118 <ADC_readChannelInterrupt+0x9e>
	}
	if(a_doneFlag == NULL_PTR || a_result == NULL_PTR)
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	21 f0       	breq	.+8      	; 0x10ca <ADC_readChannelInterrupt+0x50>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	19 f4       	brne	.+6      	; 0x10d0 <ADC_readChannelInterrupt+0x56>
	{
		/*The user sent a null pointer*/
		return ADC_ERROR_NULL_PTR;
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	8e 83       	std	Y+6, r24	; 0x06
    10ce:	24 c0       	rjmp	.+72     	; 0x1118 <ADC_readChannelInterrupt+0x9e>
	}

	ADMUX = (ADMUX & 0xE0) | (a_channel & 0x1F) ; /*Selecting the channel from the argument*/
    10d0:	a7 e2       	ldi	r26, 0x27	; 39
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e7 e2       	ldi	r30, 0x27	; 39
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	98 2f       	mov	r25, r24
    10dc:	90 7e       	andi	r25, 0xE0	; 224
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	8f 71       	andi	r24, 0x1F	; 31
    10e2:	89 2b       	or	r24, r25
    10e4:	8c 93       	st	X, r24
	ADC_g_doneFlag = a_doneFlag;	/*Save the user passed flag*/
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ea:	90 93 cf 01 	sts	0x01CF, r25
    10ee:	80 93 ce 01 	sts	0x01CE, r24
	*ADC_g_doneFlag = ADC_CONVERSION_STARTED; /*Indicate the conversion starting*/
    10f2:	e0 91 ce 01 	lds	r30, 0x01CE
    10f6:	f0 91 cf 01 	lds	r31, 0x01CF
    10fa:	10 82       	st	Z, r1

	ADC_g_digitalValue = a_result; /*Save the user passed result*/
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	90 93 cd 01 	sts	0x01CD, r25
    1104:	80 93 cc 01 	sts	0x01CC, r24
	SET_BIT(ADCSRA,  ADSC);/*starting the adc*/
    1108:	a6 e2       	ldi	r26, 0x26	; 38
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e6 e2       	ldi	r30, 0x26	; 38
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 64       	ori	r24, 0x40	; 64
    1114:	8c 93       	st	X, r24
	return ADC_SUCCESS;/*The function handled the request successfully*/
    1116:	1e 82       	std	Y+6, r1	; 0x06
    1118:	8e 81       	ldd	r24, Y+6	; 0x06
}
    111a:	26 96       	adiw	r28, 0x06	; 6
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <DC_MOTOR_stopMotor>:

/*
 * @brief the function will stop the motor.
 * */
static void DC_MOTOR_stopMotor(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN1, LOGIC_LOW);
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	65 e0       	ldi	r22, 0x05	; 5
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN2, LOGIC_LOW);
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	66 e0       	ldi	r22, 0x06	; 6
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
	PWM_deInit();
    1148:	0e 94 40 14 	call	0x2880	; 0x2880 <PWM_deInit>
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DC_MOTOR_Init>:
/*
 * @brief the function will setup the pins of the motor
 * using gpio. Also it will initlize the pwm Mode
 * */
DC_MOTOR_ErrorType DC_MOTOR_Init(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	64 97       	sbiw	r28, 0x14	; 20
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
	DC_MOTOR_ErrorType response = {DC_MOTOR_NO_ERROR, DC_MOTOR_NO_ERROR_MSG};
    1166:	ce 01       	movw	r24, r28
    1168:	04 96       	adiw	r24, 0x04	; 4
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	8f 83       	std	Y+7, r24	; 0x07
    116e:	e2 ec       	ldi	r30, 0xC2	; 194
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	fa 87       	std	Y+10, r31	; 0x0a
    1174:	e9 87       	std	Y+9, r30	; 0x09
    1176:	f3 e0       	ldi	r31, 0x03	; 3
    1178:	fb 87       	std	Y+11, r31	; 0x0b
    117a:	e9 85       	ldd	r30, Y+9	; 0x09
    117c:	fa 85       	ldd	r31, Y+10	; 0x0a
    117e:	00 80       	ld	r0, Z
    1180:	89 85       	ldd	r24, Y+9	; 0x09
    1182:	9a 85       	ldd	r25, Y+10	; 0x0a
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	9a 87       	std	Y+10, r25	; 0x0a
    1188:	89 87       	std	Y+9, r24	; 0x09
    118a:	ef 81       	ldd	r30, Y+7	; 0x07
    118c:	f8 85       	ldd	r31, Y+8	; 0x08
    118e:	00 82       	st	Z, r0
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	98 85       	ldd	r25, Y+8	; 0x08
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	98 87       	std	Y+8, r25	; 0x08
    1198:	8f 83       	std	Y+7, r24	; 0x07
    119a:	9b 85       	ldd	r25, Y+11	; 0x0b
    119c:	91 50       	subi	r25, 0x01	; 1
    119e:	9b 87       	std	Y+11, r25	; 0x0b
    11a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    11a2:	ee 23       	and	r30, r30
    11a4:	51 f7       	brne	.-44     	; 0x117a <DC_MOTOR_Init+0x28>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1, PIN_OUTPUT);
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	65 e0       	ldi	r22, 0x05	; 5
    11aa:	41 e0       	ldi	r20, 0x01	; 1
    11ac:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2, PIN_OUTPUT);
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	66 e0       	ldi	r22, 0x06	; 6
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_setupPinDirection>
	PWM_Timer0_Start(0);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 24 14 	call	0x2848	; 0x2848 <PWM_Timer0_Start>
	return response;
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	9d 87       	std	Y+13, r25	; 0x0d
    11c6:	8c 87       	std	Y+12, r24	; 0x0c
    11c8:	fe 01       	movw	r30, r28
    11ca:	34 96       	adiw	r30, 0x04	; 4
    11cc:	ff 87       	std	Y+15, r31	; 0x0f
    11ce:	ee 87       	std	Y+14, r30	; 0x0e
    11d0:	f3 e0       	ldi	r31, 0x03	; 3
    11d2:	f8 8b       	std	Y+16, r31	; 0x10
    11d4:	ee 85       	ldd	r30, Y+14	; 0x0e
    11d6:	ff 85       	ldd	r31, Y+15	; 0x0f
    11d8:	00 80       	ld	r0, Z
    11da:	8e 85       	ldd	r24, Y+14	; 0x0e
    11dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	9f 87       	std	Y+15, r25	; 0x0f
    11e2:	8e 87       	std	Y+14, r24	; 0x0e
    11e4:	ec 85       	ldd	r30, Y+12	; 0x0c
    11e6:	fd 85       	ldd	r31, Y+13	; 0x0d
    11e8:	00 82       	st	Z, r0
    11ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	9d 87       	std	Y+13, r25	; 0x0d
    11f2:	8c 87       	std	Y+12, r24	; 0x0c
    11f4:	98 89       	ldd	r25, Y+16	; 0x10
    11f6:	91 50       	subi	r25, 0x01	; 1
    11f8:	98 8b       	std	Y+16, r25	; 0x10
    11fa:	e8 89       	ldd	r30, Y+16	; 0x10
    11fc:	ee 23       	and	r30, r30
    11fe:	51 f7       	brne	.-44     	; 0x11d4 <DC_MOTOR_Init+0x82>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	29 81       	ldd	r18, Y+1	; 0x01
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9b 81       	ldd	r25, Y+3	; 0x03
    120c:	29 8b       	std	Y+17, r18	; 0x11
    120e:	8a 8b       	std	Y+18, r24	; 0x12
    1210:	9b 8b       	std	Y+19, r25	; 0x13
    1212:	89 89       	ldd	r24, Y+17	; 0x11
    1214:	9a 89       	ldd	r25, Y+18	; 0x12
    1216:	ab 89       	ldd	r26, Y+19	; 0x13
    1218:	bc 89       	ldd	r27, Y+20	; 0x14
}
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	64 96       	adiw	r28, 0x14	; 20
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <DC_MOTOR_Rotate>:
 * @param DcMotor_State a state of Clock wise or anti clock wise
 *
 * @param uint8 speed it the speed of the motor
 * */
DC_MOTOR_ErrorType DC_MOTOR_Rotate(DcMotor_State a_state,uint8 a_speed)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	a9 97       	sbiw	r28, 0x29	; 41
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	89 87       	std	Y+9, r24	; 0x09
    1246:	6a 87       	std	Y+10, r22	; 0x0a
	DC_MOTOR_ErrorType response = {DC_MOTOR_NO_ERROR, DC_MOTOR_NO_ERROR_MSG};
    1248:	9e 01       	movw	r18, r28
    124a:	2a 5f       	subi	r18, 0xFA	; 250
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	3e 87       	std	Y+14, r19	; 0x0e
    1250:	2d 87       	std	Y+13, r18	; 0x0d
    1252:	85 ec       	ldi	r24, 0xC5	; 197
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	98 8b       	std	Y+16, r25	; 0x10
    1258:	8f 87       	std	Y+15, r24	; 0x0f
    125a:	93 e0       	ldi	r25, 0x03	; 3
    125c:	99 8b       	std	Y+17, r25	; 0x11
    125e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1260:	f8 89       	ldd	r31, Y+16	; 0x10
    1262:	00 80       	ld	r0, Z
    1264:	2f 85       	ldd	r18, Y+15	; 0x0f
    1266:	38 89       	ldd	r19, Y+16	; 0x10
    1268:	2f 5f       	subi	r18, 0xFF	; 255
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	38 8b       	std	Y+16, r19	; 0x10
    126e:	2f 87       	std	Y+15, r18	; 0x0f
    1270:	ed 85       	ldd	r30, Y+13	; 0x0d
    1272:	fe 85       	ldd	r31, Y+14	; 0x0e
    1274:	00 82       	st	Z, r0
    1276:	2d 85       	ldd	r18, Y+13	; 0x0d
    1278:	3e 85       	ldd	r19, Y+14	; 0x0e
    127a:	2f 5f       	subi	r18, 0xFF	; 255
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	3e 87       	std	Y+14, r19	; 0x0e
    1280:	2d 87       	std	Y+13, r18	; 0x0d
    1282:	39 89       	ldd	r19, Y+17	; 0x11
    1284:	31 50       	subi	r19, 0x01	; 1
    1286:	39 8b       	std	Y+17, r19	; 0x11
    1288:	89 89       	ldd	r24, Y+17	; 0x11
    128a:	88 23       	and	r24, r24
    128c:	41 f7       	brne	.-48     	; 0x125e <DC_MOTOR_Rotate+0x2e>
	uint16 compareValue = 0;
    128e:	1a 82       	std	Y+2, r1	; 0x02
    1290:	19 82       	std	Y+1, r1	; 0x01
	/*Input validation*/

	/*Check if states are correct*/
	if(a_state > DC_MOTOR_CW)
    1292:	89 85       	ldd	r24, Y+9	; 0x09
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	50 f1       	brcs	.+84     	; 0x12ec <DC_MOTOR_Rotate+0xbc>
	{
		/*if true then the state is incorrect */
		response.code = DC_MOTOR_ERROR_STATE;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8e 83       	std	Y+6, r24	; 0x06
		response.message = DC_MOTOR_ERROR_STATE_MSG;
    129c:	81 e7       	ldi	r24, 0x71	; 113
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	98 87       	std	Y+8, r25	; 0x08
    12a2:	8f 83       	std	Y+7, r24	; 0x07
		return response;
    12a4:	fe 01       	movw	r30, r28
    12a6:	33 96       	adiw	r30, 0x03	; 3
    12a8:	fb 8b       	std	Y+19, r31	; 0x13
    12aa:	ea 8b       	std	Y+18, r30	; 0x12
    12ac:	9e 01       	movw	r18, r28
    12ae:	2a 5f       	subi	r18, 0xFA	; 250
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	3d 8b       	std	Y+21, r19	; 0x15
    12b4:	2c 8b       	std	Y+20, r18	; 0x14
    12b6:	33 e0       	ldi	r19, 0x03	; 3
    12b8:	3e 8b       	std	Y+22, r19	; 0x16
    12ba:	ec 89       	ldd	r30, Y+20	; 0x14
    12bc:	fd 89       	ldd	r31, Y+21	; 0x15
    12be:	00 80       	ld	r0, Z
    12c0:	2c 89       	ldd	r18, Y+20	; 0x14
    12c2:	3d 89       	ldd	r19, Y+21	; 0x15
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	3d 8b       	std	Y+21, r19	; 0x15
    12ca:	2c 8b       	std	Y+20, r18	; 0x14
    12cc:	ea 89       	ldd	r30, Y+18	; 0x12
    12ce:	fb 89       	ldd	r31, Y+19	; 0x13
    12d0:	00 82       	st	Z, r0
    12d2:	2a 89       	ldd	r18, Y+18	; 0x12
    12d4:	3b 89       	ldd	r19, Y+19	; 0x13
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	3b 8b       	std	Y+19, r19	; 0x13
    12dc:	2a 8b       	std	Y+18, r18	; 0x12
    12de:	3e 89       	ldd	r19, Y+22	; 0x16
    12e0:	31 50       	subi	r19, 0x01	; 1
    12e2:	3e 8b       	std	Y+22, r19	; 0x16
    12e4:	8e 89       	ldd	r24, Y+22	; 0x16
    12e6:	88 23       	and	r24, r24
    12e8:	41 f7       	brne	.-48     	; 0x12ba <DC_MOTOR_Rotate+0x8a>
    12ea:	b8 c0       	rjmp	.+368    	; 0x145c <DC_MOTOR_Rotate+0x22c>
	}

	/*Check if the speed within the speed limits */
	if(a_speed > DC_MOTOR_MAX_SPEED)
    12ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ee:	85 36       	cpi	r24, 0x65	; 101
    12f0:	50 f1       	brcs	.+84     	; 0x1346 <DC_MOTOR_Rotate+0x116>
	{
		/*If true that means the speed is not correct*/
		response.code = DC_MOTOR_ERROR_SPEED;
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	8e 83       	std	Y+6, r24	; 0x06
		response.message = DC_MOTOR_ERROR_SPEED_MSG;
    12f6:	87 e8       	ldi	r24, 0x87	; 135
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	98 87       	std	Y+8, r25	; 0x08
    12fc:	8f 83       	std	Y+7, r24	; 0x07
		return response;
    12fe:	fe 01       	movw	r30, r28
    1300:	33 96       	adiw	r30, 0x03	; 3
    1302:	f8 8f       	std	Y+24, r31	; 0x18
    1304:	ef 8b       	std	Y+23, r30	; 0x17
    1306:	9e 01       	movw	r18, r28
    1308:	2a 5f       	subi	r18, 0xFA	; 250
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	3a 8f       	std	Y+26, r19	; 0x1a
    130e:	29 8f       	std	Y+25, r18	; 0x19
    1310:	33 e0       	ldi	r19, 0x03	; 3
    1312:	3b 8f       	std	Y+27, r19	; 0x1b
    1314:	e9 8d       	ldd	r30, Y+25	; 0x19
    1316:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1318:	00 80       	ld	r0, Z
    131a:	29 8d       	ldd	r18, Y+25	; 0x19
    131c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	3a 8f       	std	Y+26, r19	; 0x1a
    1324:	29 8f       	std	Y+25, r18	; 0x19
    1326:	ef 89       	ldd	r30, Y+23	; 0x17
    1328:	f8 8d       	ldd	r31, Y+24	; 0x18
    132a:	00 82       	st	Z, r0
    132c:	2f 89       	ldd	r18, Y+23	; 0x17
    132e:	38 8d       	ldd	r19, Y+24	; 0x18
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	38 8f       	std	Y+24, r19	; 0x18
    1336:	2f 8b       	std	Y+23, r18	; 0x17
    1338:	3b 8d       	ldd	r19, Y+27	; 0x1b
    133a:	31 50       	subi	r19, 0x01	; 1
    133c:	3b 8f       	std	Y+27, r19	; 0x1b
    133e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1340:	88 23       	and	r24, r24
    1342:	41 f7       	brne	.-48     	; 0x1314 <DC_MOTOR_Rotate+0xe4>
    1344:	8b c0       	rjmp	.+278    	; 0x145c <DC_MOTOR_Rotate+0x22c>
	 * 	then we will write
	 * 	LOGIC_HIGH to DC_MOTOR_PIN1
	 * 	and
	 * 	LOGIC_LOW to DC_MOTOR_PIN2
	 * */
	switch(a_state)
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	e8 2f       	mov	r30, r24
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	fc 87       	std	Y+12, r31	; 0x0c
    134e:	eb 87       	std	Y+11, r30	; 0x0b
    1350:	2b 85       	ldd	r18, Y+11	; 0x0b
    1352:	3c 85       	ldd	r19, Y+12	; 0x0c
    1354:	21 30       	cpi	r18, 0x01	; 1
    1356:	31 05       	cpc	r19, r1
    1358:	31 f0       	breq	.+12     	; 0x1366 <DC_MOTOR_Rotate+0x136>
    135a:	8b 85       	ldd	r24, Y+11	; 0x0b
    135c:	9c 85       	ldd	r25, Y+12	; 0x0c
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	91 05       	cpc	r25, r1
    1362:	61 f0       	breq	.+24     	; 0x137c <DC_MOTOR_Rotate+0x14c>
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <DC_MOTOR_Rotate+0x162>
	{
	case DC_MOTOR_ACW:
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN1, LOGIC_LOW);
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	65 e0       	ldi	r22, 0x05	; 5
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN2, LOGIC_HIGH);
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    137a:	31 c0       	rjmp	.+98     	; 0x13de <DC_MOTOR_Rotate+0x1ae>
		break;
	case DC_MOTOR_CW:
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN2, LOGIC_LOW);
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	66 e0       	ldi	r22, 0x06	; 6
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_PIN1, LOGIC_HIGH);
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	65 e0       	ldi	r22, 0x05	; 5
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    1390:	26 c0       	rjmp	.+76     	; 0x13de <DC_MOTOR_Rotate+0x1ae>
		break;
	default:
		DC_MOTOR_stopMotor();
    1392:	0e 94 96 08 	call	0x112c	; 0x112c <DC_MOTOR_stopMotor>
		return response;
    1396:	fe 01       	movw	r30, r28
    1398:	33 96       	adiw	r30, 0x03	; 3
    139a:	fd 8f       	std	Y+29, r31	; 0x1d
    139c:	ec 8f       	std	Y+28, r30	; 0x1c
    139e:	9e 01       	movw	r18, r28
    13a0:	2a 5f       	subi	r18, 0xFA	; 250
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	3f 8f       	std	Y+31, r19	; 0x1f
    13a6:	2e 8f       	std	Y+30, r18	; 0x1e
    13a8:	33 e0       	ldi	r19, 0x03	; 3
    13aa:	38 a3       	std	Y+32, r19	; 0x20
    13ac:	ee 8d       	ldd	r30, Y+30	; 0x1e
    13ae:	ff 8d       	ldd	r31, Y+31	; 0x1f
    13b0:	00 80       	ld	r0, Z
    13b2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    13b4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    13b6:	2f 5f       	subi	r18, 0xFF	; 255
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	3f 8f       	std	Y+31, r19	; 0x1f
    13bc:	2e 8f       	std	Y+30, r18	; 0x1e
    13be:	ec 8d       	ldd	r30, Y+28	; 0x1c
    13c0:	fd 8d       	ldd	r31, Y+29	; 0x1d
    13c2:	00 82       	st	Z, r0
    13c4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13c6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    13c8:	2f 5f       	subi	r18, 0xFF	; 255
    13ca:	3f 4f       	sbci	r19, 0xFF	; 255
    13cc:	3d 8f       	std	Y+29, r19	; 0x1d
    13ce:	2c 8f       	std	Y+28, r18	; 0x1c
    13d0:	38 a1       	ldd	r19, Y+32	; 0x20
    13d2:	31 50       	subi	r19, 0x01	; 1
    13d4:	38 a3       	std	Y+32, r19	; 0x20
    13d6:	88 a1       	ldd	r24, Y+32	; 0x20
    13d8:	88 23       	and	r24, r24
    13da:	41 f7       	brne	.-48     	; 0x13ac <DC_MOTOR_Rotate+0x17c>
    13dc:	3f c0       	rjmp	.+126    	; 0x145c <DC_MOTOR_Rotate+0x22c>
	 * 					---- Solve for x ----
	 *
	 * 	x = (50 * 255) / 100
	 * 	x = 127 (50% duty cycle)
	 * */
	compareValue = (((uint16)a_speed * PWM_MAX_VALUE)/DC_MOTOR_MAX_SPEED);
    13de:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e0:	48 2f       	mov	r20, r24
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	ca 01       	movw	r24, r20
    13e6:	9c 01       	movw	r18, r24
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	c9 01       	movw	r24, r18
    13ee:	96 95       	lsr	r25
    13f0:	98 2f       	mov	r25, r24
    13f2:	88 27       	eor	r24, r24
    13f4:	97 95       	ror	r25
    13f6:	87 95       	ror	r24
    13f8:	82 1b       	sub	r24, r18
    13fa:	93 0b       	sbc	r25, r19
    13fc:	84 0f       	add	r24, r20
    13fe:	95 1f       	adc	r25, r21
    1400:	24 e6       	ldi	r18, 0x64	; 100
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	b9 01       	movw	r22, r18
    1406:	0e 94 57 14 	call	0x28ae	; 0x28ae <__udivmodhi4>
    140a:	cb 01       	movw	r24, r22
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01

	PWM_Timer0_Start((uint8)compareValue);
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	0e 94 24 14 	call	0x2848	; 0x2848 <PWM_Timer0_Start>
	return response;
    1416:	fe 01       	movw	r30, r28
    1418:	33 96       	adiw	r30, 0x03	; 3
    141a:	fa a3       	std	Y+34, r31	; 0x22
    141c:	e9 a3       	std	Y+33, r30	; 0x21
    141e:	9e 01       	movw	r18, r28
    1420:	2a 5f       	subi	r18, 0xFA	; 250
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	3c a3       	std	Y+36, r19	; 0x24
    1426:	2b a3       	std	Y+35, r18	; 0x23
    1428:	33 e0       	ldi	r19, 0x03	; 3
    142a:	3d a3       	std	Y+37, r19	; 0x25
    142c:	eb a1       	ldd	r30, Y+35	; 0x23
    142e:	fc a1       	ldd	r31, Y+36	; 0x24
    1430:	00 80       	ld	r0, Z
    1432:	2b a1       	ldd	r18, Y+35	; 0x23
    1434:	3c a1       	ldd	r19, Y+36	; 0x24
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	3c a3       	std	Y+36, r19	; 0x24
    143c:	2b a3       	std	Y+35, r18	; 0x23
    143e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1440:	fa a1       	ldd	r31, Y+34	; 0x22
    1442:	00 82       	st	Z, r0
    1444:	29 a1       	ldd	r18, Y+33	; 0x21
    1446:	3a a1       	ldd	r19, Y+34	; 0x22
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	3a a3       	std	Y+34, r19	; 0x22
    144e:	29 a3       	std	Y+33, r18	; 0x21
    1450:	3d a1       	ldd	r19, Y+37	; 0x25
    1452:	31 50       	subi	r19, 0x01	; 1
    1454:	3d a3       	std	Y+37, r19	; 0x25
    1456:	8d a1       	ldd	r24, Y+37	; 0x25
    1458:	88 23       	and	r24, r24
    145a:	41 f7       	brne	.-48     	; 0x142c <DC_MOTOR_Rotate+0x1fc>
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9d 81       	ldd	r25, Y+5	; 0x05
    1468:	2e a3       	std	Y+38, r18	; 0x26
    146a:	8f a3       	std	Y+39, r24	; 0x27
    146c:	98 a7       	std	Y+40, r25	; 0x28
    146e:	8e a1       	ldd	r24, Y+38	; 0x26
    1470:	9f a1       	ldd	r25, Y+39	; 0x27
    1472:	a8 a5       	ldd	r26, Y+40	; 0x28
    1474:	b9 a5       	ldd	r27, Y+41	; 0x29
}
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	a9 96       	adiw	r28, 0x29	; 41
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <GPIO_setupPinDirection>:
 * Possible return value:
 * void
 * */
void GPIO_setupPinDirection(GPIO_PortIdType a_portId, GPIO_PinIdType a_pinId, \
		GPIO_PinDirectionType a_direction)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <GPIO_setupPinDirection+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <GPIO_setupPinDirection+0x8>
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6a 83       	std	Y+2, r22	; 0x02
    149e:	4b 83       	std	Y+3, r20	; 0x03
	/*Check the Correctness of port_id and pin_id*/
	if( a_portId >= PORTS_NUM || a_portId < 0
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <GPIO_setupPinDirection+0x1c>
    14a6:	d5 c0       	rjmp	.+426    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <GPIO_setupPinDirection+0x24>
    14ae:	d1 c0       	rjmp	.+418    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
	else
	{
		/*Valid input*/

		/*Choose the port*/
		switch(a_portId)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3d 83       	std	Y+5, r19	; 0x05
    14b8:	2c 83       	std	Y+4, r18	; 0x04
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <GPIO_setupPinDirection+0x3a>
    14c4:	43 c0       	rjmp	.+134    	; 0x154c <GPIO_setupPinDirection+0xc0>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <GPIO_setupPinDirection+0x4e>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <GPIO_setupPinDirection+0x68>
    14d8:	bc c0       	rjmp	.+376    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <GPIO_setupPinDirection+0x5a>
    14e4:	5f c0       	rjmp	.+190    	; 0x15a4 <GPIO_setupPinDirection+0x118>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <GPIO_setupPinDirection+0x66>
    14f0:	85 c0       	rjmp	.+266    	; 0x15fc <GPIO_setupPinDirection+0x170>
    14f2:	af c0       	rjmp	.+350    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(a_direction == PIN_INPUT) /*if the direction is input*/
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 23       	and	r24, r24
    14f8:	a9 f4       	brne	.+42     	; 0x1524 <GPIO_setupPinDirection+0x98>
			{
				/*bit should be 0 for input*/
				CLEAR_BIT(DDRA, a_pinId);
    14fa:	aa e3       	ldi	r26, 0x3A	; 58
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ea e3       	ldi	r30, 0x3A	; 58
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <GPIO_setupPinDirection+0x8c>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <GPIO_setupPinDirection+0x88>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	97 c0       	rjmp	.+302    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
			}
			else /*Direction is output (not input)*/
			{
				/*bit should be 1 for output*/
				SET_BIT(DDRA, a_pinId);
    1524:	aa e3       	ldi	r26, 0x3A	; 58
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ea e3       	ldi	r30, 0x3A	; 58
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <GPIO_setupPinDirection+0xb6>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <GPIO_setupPinDirection+0xb2>
    1546:	84 2b       	or	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	83 c0       	rjmp	.+262    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(a_direction == PIN_INPUT) /*if the direction is input*/
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 23       	and	r24, r24
    1550:	a9 f4       	brne	.+42     	; 0x157c <GPIO_setupPinDirection+0xf0>
			{
				/*bit should be 0 for input*/
				CLEAR_BIT(DDRB, a_pinId);
    1552:	a7 e3       	ldi	r26, 0x37	; 55
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e7 e3       	ldi	r30, 0x37	; 55
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_setupPinDirection+0xe4>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_setupPinDirection+0xe0>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	6b c0       	rjmp	.+214    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
			}
			else /*Direction is output (not input)*/
			{
				/*bit should be 1 for output*/
				SET_BIT(DDRB, a_pinId);
    157c:	a7 e3       	ldi	r26, 0x37	; 55
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e7 e3       	ldi	r30, 0x37	; 55
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <GPIO_setupPinDirection+0x10e>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <GPIO_setupPinDirection+0x10a>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	57 c0       	rjmp	.+174    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(a_direction == PIN_INPUT) /*if the direction is input*/
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 23       	and	r24, r24
    15a8:	a9 f4       	brne	.+42     	; 0x15d4 <GPIO_setupPinDirection+0x148>
			{
				/*bit should be 0 for input*/
				CLEAR_BIT(DDRC, a_pinId);
    15aa:	a4 e3       	ldi	r26, 0x34	; 52
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <GPIO_setupPinDirection+0x13c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <GPIO_setupPinDirection+0x138>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <GPIO_setupPinDirection+0x1c6>
			}
			else /*Direction is output (not input)*/
			{
				/*bit should be 1 for output*/
				SET_BIT(DDRC, a_pinId);
    15d4:	a4 e3       	ldi	r26, 0x34	; 52
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e4 e3       	ldi	r30, 0x34	; 52
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_setupPinDirection+0x166>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_setupPinDirection+0x162>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	2b c0       	rjmp	.+86     	; 0x1652 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(a_direction == PIN_INPUT) /*if the direction is input*/
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	88 23       	and	r24, r24
    1600:	a9 f4       	brne	.+42     	; 0x162c <GPIO_setupPinDirection+0x1a0>
			{
				/*bit should be 0 for input*/
				CLEAR_BIT(DDRD, a_pinId);
    1602:	a1 e3       	ldi	r26, 0x31	; 49
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e1 e3       	ldi	r30, 0x31	; 49
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <GPIO_setupPinDirection+0x194>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <GPIO_setupPinDirection+0x190>
    1624:	80 95       	com	r24
    1626:	84 23       	and	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	13 c0       	rjmp	.+38     	; 0x1652 <GPIO_setupPinDirection+0x1c6>
			}
			else /*Direction is output (not input)*/
			{
				/*bit should be 1 for output*/
				SET_BIT(DDRD, a_pinId);
    162c:	a1 e3       	ldi	r26, 0x31	; 49
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e1 e3       	ldi	r30, 0x31	; 49
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_setupPinDirection+0x1be>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_setupPinDirection+0x1ba>
    164e:	84 2b       	or	r24, r20
    1650:	8c 93       	st	X, r24
			/*doing nothing*/
			break;
		}
	}
	return;
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <GPIO_setupPortDirection>:
 *
 * Possible return value:
 * void
 * */
void GPIO_setupPortDirection(GPIO_PortIdType a_portId, GPIO_PortDirectionType a_direction)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <GPIO_setupPortDirection+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_setupPortDirection+0x8>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	6a 83       	std	Y+2, r22	; 0x02
	/*Check the Correctness of port_id and pin_id*/
	if( a_portId >= PORTS_NUM || a_portId < 0)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	84 30       	cpi	r24, 0x04	; 4
    1676:	08 f0       	brcs	.+2      	; 0x167a <GPIO_setupPortDirection+0x18>
    1678:	4e c0       	rjmp	.+156    	; 0x1716 <GPIO_setupPortDirection+0xb4>
		return;/*Not handling the request*/
	}
	else
	{
		/*Valid input*/
		switch(a_portId)
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3c 83       	std	Y+4, r19	; 0x04
    1682:	2b 83       	std	Y+3, r18	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	09 f1       	breq	.+66     	; 0x16d0 <GPIO_setupPortDirection+0x6e>
    168e:	2b 81       	ldd	r18, Y+3	; 0x03
    1690:	3c 81       	ldd	r19, Y+4	; 0x04
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	2c f4       	brge	.+10     	; 0x16a2 <GPIO_setupPortDirection+0x40>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	61 f0       	breq	.+24     	; 0x16b8 <GPIO_setupPortDirection+0x56>
    16a0:	3a c0       	rjmp	.+116    	; 0x1716 <GPIO_setupPortDirection+0xb4>
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	3c 81       	ldd	r19, Y+4	; 0x04
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	f1 f0       	breq	.+60     	; 0x16e8 <GPIO_setupPortDirection+0x86>
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	29 f1       	breq	.+74     	; 0x1700 <GPIO_setupPortDirection+0x9e>
    16b6:	2f c0       	rjmp	.+94     	; 0x1716 <GPIO_setupPortDirection+0xb4>
		{
		case PORTA_ID:
			if(a_direction == PORT_INPUT) /*if the direction is input*/
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	88 23       	and	r24, r24
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <GPIO_setupPortDirection+0x64>
			{
				DDRA = PORT_INPUT; /*set the port with PORT_INPUT*/
    16be:	ea e3       	ldi	r30, 0x3A	; 58
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
    16c4:	28 c0       	rjmp	.+80     	; 0x1716 <GPIO_setupPortDirection+0xb4>
			}
			else /*if the direction is output (not input)*/
			{
				DDRA = PORT_OUTPUT;/*set the port with PORT_OUTPUT*/
    16c6:	ea e3       	ldi	r30, 0x3A	; 58
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	80 83       	st	Z, r24
    16ce:	23 c0       	rjmp	.+70     	; 0x1716 <GPIO_setupPortDirection+0xb4>
			}
			break;
		case PORTB_ID:
			if(a_direction == PORT_INPUT) /*if the direction is input*/
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	88 23       	and	r24, r24
    16d4:	21 f4       	brne	.+8      	; 0x16de <GPIO_setupPortDirection+0x7c>
			{
				DDRB = PORT_INPUT; /*set the port with PORT_INPUT*/
    16d6:	e7 e3       	ldi	r30, 0x37	; 55
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	10 82       	st	Z, r1
    16dc:	1c c0       	rjmp	.+56     	; 0x1716 <GPIO_setupPortDirection+0xb4>
			}
			else /*if the direction is output (not input)*/
			{
				DDRB = PORT_OUTPUT;/*set the port with PORT_OUTPUT*/
    16de:	e7 e3       	ldi	r30, 0x37	; 55
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	80 83       	st	Z, r24
    16e6:	17 c0       	rjmp	.+46     	; 0x1716 <GPIO_setupPortDirection+0xb4>
			}
			break;
		case PORTC_ID:
			if(a_direction == PORT_INPUT) /*if the direction is input*/
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	88 23       	and	r24, r24
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <GPIO_setupPortDirection+0x94>
			{
				DDRC = PORT_INPUT; /*set the port with PORT_INPUT*/
    16ee:	e4 e3       	ldi	r30, 0x34	; 52
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1
    16f4:	10 c0       	rjmp	.+32     	; 0x1716 <GPIO_setupPortDirection+0xb4>
			}
			else /*if the direction is output (not input)*/
			{
				DDRC = PORT_OUTPUT;/*set the port with PORT_OUTPUT*/
    16f6:	e4 e3       	ldi	r30, 0x34	; 52
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	80 83       	st	Z, r24
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <GPIO_setupPortDirection+0xb4>
			}
			break;
		case PORTD_ID:
			if(a_direction == PORT_INPUT) /*if the direction is input*/
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	88 23       	and	r24, r24
    1704:	21 f4       	brne	.+8      	; 0x170e <GPIO_setupPortDirection+0xac>
			{
				DDRD = PORT_INPUT; /*set the port with PORT_INPUT*/
    1706:	e1 e3       	ldi	r30, 0x31	; 49
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	10 82       	st	Z, r1
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <GPIO_setupPortDirection+0xb4>
			}
			else /*if the direction is output (not input)*/
			{
				DDRD = PORT_OUTPUT;/*set the port with PORT_OUTPUT*/
    170e:	e1 e3       	ldi	r30, 0x31	; 49
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	80 83       	st	Z, r24
			/*Doing nothing*/
			break;
		}
	}
	return;
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <GPIO_readPin>:
 *
 * Possible return values:
 * LOGIC_LOW, the pin value from the port (0, 255)
 * */
uint8 GPIO_readPin(GPIO_PortIdType a_portId, GPIO_PinIdType a_pinId)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <GPIO_readPin+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <GPIO_readPin+0x8>
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	8a 83       	std	Y+2, r24	; 0x02
    1734:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = 0x00; /*To store the return value*/
    1736:	19 82       	std	Y+1, r1	; 0x01
	/*Check the Correctness of port_id and pin_id*/
	if( a_portId >= PORTS_NUM || a_portId < 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	18 f4       	brcc	.+6      	; 0x1744 <GPIO_readPin+0x20>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 30       	cpi	r24, 0x08	; 8
    1742:	10 f0       	brcs	.+4      	; 0x1748 <GPIO_readPin+0x24>
		||a_pinId >= PINS_PER_PORT_NUM || a_pinId < 0)
	{
		/*invalid input*/
		pinValue = LOGIC_LOW;/*setting the return value*/
    1744:	19 82       	std	Y+1, r1	; 0x01
    1746:	6b c0       	rjmp	.+214    	; 0x181e <GPIO_readPin+0xfa>
	}
	else
	{
		/*Valid input*/

		switch(a_portId)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3d 83       	std	Y+5, r19	; 0x05
    1750:	2c 83       	std	Y+4, r18	; 0x04
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	39 f1       	breq	.+78     	; 0x17aa <GPIO_readPin+0x86>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <GPIO_readPin+0x4c>
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	61 f0       	breq	.+24     	; 0x1786 <GPIO_readPin+0x62>
    176e:	52 c0       	rjmp	.+164    	; 0x1814 <GPIO_readPin+0xf0>
    1770:	2c 81       	ldd	r18, Y+4	; 0x04
    1772:	3d 81       	ldd	r19, Y+5	; 0x05
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	51 f1       	breq	.+84     	; 0x17ce <GPIO_readPin+0xaa>
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	83 30       	cpi	r24, 0x03	; 3
    1780:	91 05       	cpc	r25, r1
    1782:	b9 f1       	breq	.+110    	; 0x17f2 <GPIO_readPin+0xce>
    1784:	47 c0       	rjmp	.+142    	; 0x1814 <GPIO_readPin+0xf0>
		{
		case PORTA_ID:
			pinValue = READ_BIT(PINA, a_pinId);/*Reading the pin_id from PORTA*/
    1786:	e9 e3       	ldi	r30, 0x39	; 57
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GPIO_readPin+0x7c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GPIO_readPin+0x78>
    17a4:	84 23       	and	r24, r20
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	35 c0       	rjmp	.+106    	; 0x1814 <GPIO_readPin+0xf0>
			break;
		case PORTB_ID:
			pinValue = READ_BIT(PINB, a_pinId);/*Reading the pin_id from PORTB*/
    17aa:	e6 e3       	ldi	r30, 0x36	; 54
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <GPIO_readPin+0xa0>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <GPIO_readPin+0x9c>
    17c8:	84 23       	and	r24, r20
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	23 c0       	rjmp	.+70     	; 0x1814 <GPIO_readPin+0xf0>
			break;
		case PORTC_ID:
			pinValue = READ_BIT(PINC, a_pinId);/*Reading the pin_id from PORTC*/
    17ce:	e3 e3       	ldi	r30, 0x33	; 51
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_readPin+0xc4>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_readPin+0xc0>
    17ec:	84 23       	and	r24, r20
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	11 c0       	rjmp	.+34     	; 0x1814 <GPIO_readPin+0xf0>
			break;
		case PORTD_ID:
			pinValue = READ_BIT(PIND, a_pinId);/*Reading the pin_id from PORTD*/
    17f2:	e0 e3       	ldi	r30, 0x30	; 48
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_readPin+0xe8>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_readPin+0xe4>
    1810:	84 23       	and	r24, r20
    1812:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			/*Doing nothing*/
			break;
		}
		if(pinValue != LOGIC_LOW)/*if the value is not LOGIC_LOW*/
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	88 23       	and	r24, r24
    1818:	11 f0       	breq	.+4      	; 0x181e <GPIO_readPin+0xfa>
		{
			/*set the value to be LOGIC_HIGH*/
			pinValue = LOGIC_HIGH;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	89 83       	std	Y+1, r24	; 0x01
		}
		/*but if the value was LOGIC_LOW then dont change it*/
	}
	return pinValue;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <GPIO_readPort>:
 *
 * Possible return values:
 * LOGIC_LOW, the port value (0, 255)
 * */
uint8 GPIO_readPort(GPIO_PortIdType a_portId)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <GPIO_readPort+0x6>
    1836:	00 d0       	rcall	.+0      	; 0x1838 <GPIO_readPort+0x8>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue = 0x00; /*To store the return value*/
    183e:	19 82       	std	Y+1, r1	; 0x01
	/*Check the Correctness of port_id and pin_id*/
	if( a_portId >= PORTS_NUM || a_portId < 0)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	10 f0       	brcs	.+4      	; 0x184a <GPIO_readPort+0x1a>
	{
		/*invalid input*/
		portValue = LOGIC_LOW;/*setting the return value*/
    1846:	19 82       	std	Y+1, r1	; 0x01
    1848:	32 c0       	rjmp	.+100    	; 0x18ae <GPIO_readPort+0x7e>
	}
	else
	{
		/*Valid input*/
		switch(a_portId)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3c 83       	std	Y+4, r19	; 0x04
    1852:	2b 83       	std	Y+3, r18	; 0x03
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	d1 f0       	breq	.+52     	; 0x1892 <GPIO_readPort+0x62>
    185e:	2b 81       	ldd	r18, Y+3	; 0x03
    1860:	3c 81       	ldd	r19, Y+4	; 0x04
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	2c f4       	brge	.+10     	; 0x1872 <GPIO_readPort+0x42>
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	61 f0       	breq	.+24     	; 0x1888 <GPIO_readPort+0x58>
    1870:	1e c0       	rjmp	.+60     	; 0x18ae <GPIO_readPort+0x7e>
    1872:	2b 81       	ldd	r18, Y+3	; 0x03
    1874:	3c 81       	ldd	r19, Y+4	; 0x04
    1876:	22 30       	cpi	r18, 0x02	; 2
    1878:	31 05       	cpc	r19, r1
    187a:	81 f0       	breq	.+32     	; 0x189c <GPIO_readPort+0x6c>
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	81 f0       	breq	.+32     	; 0x18a6 <GPIO_readPort+0x76>
    1886:	13 c0       	rjmp	.+38     	; 0x18ae <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			portValue = PINA;/*Reading the pin_id from PORTA*/
    1888:	e9 e3       	ldi	r30, 0x39	; 57
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			portValue = PINB;/*Reading the pin_id from PORTB*/
    1892:	e6 e3       	ldi	r30, 0x36	; 54
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			portValue = PINC;/*Reading the pin_id from PORTC*/
    189c:	e3 e3       	ldi	r30, 0x33	; 51
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			portValue = PIND;/*Reading the pin_id from PORTD*/
    18a6:	e0 e3       	ldi	r30, 0x30	; 48
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	89 83       	std	Y+1, r24	; 0x01
		default:
			/*Doing nothing*/
			break;
		}
	}
	return portValue;
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <GPIO_writePin>:
 *
 * Possible return values:
 * void
 * */
void GPIO_writePin(GPIO_PortIdType a_portId, GPIO_PinIdType a_pinId, uint8 a_pinValue)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <GPIO_writePin+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <GPIO_writePin+0x8>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6a 83       	std	Y+2, r22	; 0x02
    18d0:	4b 83       	std	Y+3, r20	; 0x03
	if( a_portId >= PORTS_NUM || a_portId < 0
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	08 f0       	brcs	.+2      	; 0x18da <GPIO_writePin+0x1c>
    18d8:	d9 c0       	rjmp	.+434    	; 0x1a8c <GPIO_writePin+0x1ce>
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	88 30       	cpi	r24, 0x08	; 8
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <GPIO_writePin+0x24>
    18e0:	d5 c0       	rjmp	.+426    	; 0x1a8c <GPIO_writePin+0x1ce>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <GPIO_writePin+0x2c>
    18e8:	d1 c0       	rjmp	.+418    	; 0x1a8c <GPIO_writePin+0x1ce>
		return;/*not handling the request*/
	}
	else
	{
		/*Valid input*/
		switch(a_portId)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3d 83       	std	Y+5, r19	; 0x05
    18f2:	2c 83       	std	Y+4, r18	; 0x04
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <GPIO_writePin+0x42>
    18fe:	43 c0       	rjmp	.+134    	; 0x1986 <GPIO_writePin+0xc8>
    1900:	2c 81       	ldd	r18, Y+4	; 0x04
    1902:	3d 81       	ldd	r19, Y+5	; 0x05
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	2c f4       	brge	.+10     	; 0x1914 <GPIO_writePin+0x56>
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	71 f0       	breq	.+28     	; 0x192e <GPIO_writePin+0x70>
    1912:	bc c0       	rjmp	.+376    	; 0x1a8c <GPIO_writePin+0x1ce>
    1914:	2c 81       	ldd	r18, Y+4	; 0x04
    1916:	3d 81       	ldd	r19, Y+5	; 0x05
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <GPIO_writePin+0x62>
    191e:	5f c0       	rjmp	.+190    	; 0x19de <GPIO_writePin+0x120>
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	91 05       	cpc	r25, r1
    1928:	09 f4       	brne	.+2      	; 0x192c <GPIO_writePin+0x6e>
    192a:	85 c0       	rjmp	.+266    	; 0x1a36 <GPIO_writePin+0x178>
    192c:	af c0       	rjmp	.+350    	; 0x1a8c <GPIO_writePin+0x1ce>
		{
		case PORTA_ID:
			if(a_pinValue == LOGIC_LOW)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	88 23       	and	r24, r24
    1932:	a9 f4       	brne	.+42     	; 0x195e <GPIO_writePin+0xa0>
			{
				/* write 0 to the pin */
				CLEAR_BIT(PORTA, a_pinId);
    1934:	ab e3       	ldi	r26, 0x3B	; 59
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	eb e3       	ldi	r30, 0x3B	; 59
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_writePin+0x94>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_writePin+0x90>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	97 c0       	rjmp	.+302    	; 0x1a8c <GPIO_writePin+0x1ce>
			}
			else
			{
				/* Write 1 to the pin */
				SET_BIT(PORTA, a_pinId);
    195e:	ab e3       	ldi	r26, 0x3B	; 59
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	eb e3       	ldi	r30, 0x3B	; 59
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <GPIO_writePin+0xbe>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <GPIO_writePin+0xba>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	83 c0       	rjmp	.+262    	; 0x1a8c <GPIO_writePin+0x1ce>
			}
			break;
		case PORTB_ID:
			if(a_pinValue == LOGIC_LOW)
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	88 23       	and	r24, r24
    198a:	a9 f4       	brne	.+42     	; 0x19b6 <GPIO_writePin+0xf8>
			{
				/* write 0 to the pin */
				CLEAR_BIT(PORTB, a_pinId);
    198c:	a8 e3       	ldi	r26, 0x38	; 56
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e8 e3       	ldi	r30, 0x38	; 56
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_writePin+0xec>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_writePin+0xe8>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	6b c0       	rjmp	.+214    	; 0x1a8c <GPIO_writePin+0x1ce>
			}
			else
			{
				/* Write 1 to the pin */
				SET_BIT(PORTB, a_pinId);
    19b6:	a8 e3       	ldi	r26, 0x38	; 56
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e8 e3       	ldi	r30, 0x38	; 56
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <GPIO_writePin+0x116>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <GPIO_writePin+0x112>
    19d8:	84 2b       	or	r24, r20
    19da:	8c 93       	st	X, r24
    19dc:	57 c0       	rjmp	.+174    	; 0x1a8c <GPIO_writePin+0x1ce>
			}
			break;
		case PORTC_ID:
			if(a_pinValue == LOGIC_LOW)
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	88 23       	and	r24, r24
    19e2:	a9 f4       	brne	.+42     	; 0x1a0e <GPIO_writePin+0x150>
			{
				/* write 0 to the pin */
				CLEAR_BIT(PORTC, a_pinId);
    19e4:	a5 e3       	ldi	r26, 0x35	; 53
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <GPIO_writePin+0x144>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <GPIO_writePin+0x140>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <GPIO_writePin+0x1ce>
			}
			else
			{
				/* Write 1 to the pin */
				SET_BIT(PORTC, a_pinId);
    1a0e:	a5 e3       	ldi	r26, 0x35	; 53
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e3       	ldi	r30, 0x35	; 53
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <GPIO_writePin+0x16e>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <GPIO_writePin+0x16a>
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	2b c0       	rjmp	.+86     	; 0x1a8c <GPIO_writePin+0x1ce>
			}
			break;
		case PORTD_ID:
			if(a_pinValue == LOGIC_LOW)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	88 23       	and	r24, r24
    1a3a:	a9 f4       	brne	.+42     	; 0x1a66 <GPIO_writePin+0x1a8>
			{
				/* write 0 to the pin */
				CLEAR_BIT(PORTD, a_pinId);
    1a3c:	a2 e3       	ldi	r26, 0x32	; 50
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e2 e3       	ldi	r30, 0x32	; 50
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <GPIO_writePin+0x19c>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <GPIO_writePin+0x198>
    1a5e:	80 95       	com	r24
    1a60:	84 23       	and	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	13 c0       	rjmp	.+38     	; 0x1a8c <GPIO_writePin+0x1ce>
			}
			else
			{
				/* Write 1 to the pin */
				SET_BIT(PORTD, a_pinId);
    1a66:	a2 e3       	ldi	r26, 0x32	; 50
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e2 e3       	ldi	r30, 0x32	; 50
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <GPIO_writePin+0x1c6>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <GPIO_writePin+0x1c2>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
			/*Doing nothing*/
			break;
		}
	}
	return;
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <GPIO_writePort>:
 *
 * possible return values:
 * void
 * */
void GPIO_writePort(GPIO_PortIdType a_portId, uint8 a_portValue)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <GPIO_writePort+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <GPIO_writePort+0x8>
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	6a 83       	std	Y+2, r22	; 0x02
	/*Check the Correctness of port_id and pin_id*/
	if( a_portId >= PORTS_NUM || a_portId < 0)
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	84 30       	cpi	r24, 0x04	; 4
    1ab0:	90 f5       	brcc	.+100    	; 0x1b16 <GPIO_writePort+0x7a>
		return;/*setting the return value*/
	}
	else
	{
		/*Valid input*/
		switch(a_portId)
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	3c 83       	std	Y+4, r19	; 0x04
    1aba:	2b 83       	std	Y+3, r18	; 0x03
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	d1 f0       	breq	.+52     	; 0x1afa <GPIO_writePort+0x5e>
    1ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	2c f4       	brge	.+10     	; 0x1ada <GPIO_writePort+0x3e>
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <GPIO_writePort+0x54>
    1ad8:	1e c0       	rjmp	.+60     	; 0x1b16 <GPIO_writePort+0x7a>
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	81 f0       	breq	.+32     	; 0x1b04 <GPIO_writePort+0x68>
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	81 f0       	breq	.+32     	; 0x1b0e <GPIO_writePort+0x72>
    1aee:	13 c0       	rjmp	.+38     	; 0x1b16 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = a_portValue;
    1af0:	eb e3       	ldi	r30, 0x3B	; 59
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	80 83       	st	Z, r24
    1af8:	0e c0       	rjmp	.+28     	; 0x1b16 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = a_portValue;
    1afa:	e8 e3       	ldi	r30, 0x38	; 56
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	80 83       	st	Z, r24
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = a_portValue;
    1b04:	e5 e3       	ldi	r30, 0x35	; 53
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	80 83       	st	Z, r24
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = a_portValue;
    1b0e:	e2 e3       	ldi	r30, 0x32	; 50
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	80 83       	st	Z, r24
			/*Doing nothing*/
			break;
		}
	}
	return;
}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 46 0a 	call	0x148c	; 0x148c <GPIO_setupPinDirection>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 ea       	ldi	r26, 0xA0	; 160
    1b52:	b1 e4       	ldi	r27, 0x41	; 65
    1b54:	8b 87       	std	Y+11, r24	; 0x0b
    1b56:	9c 87       	std	Y+12, r25	; 0x0c
    1b58:	ad 87       	std	Y+13, r26	; 0x0d
    1b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a e7       	ldi	r20, 0x7A	; 122
    1b6a:	53 e4       	ldi	r21, 0x43	; 67
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8f 83       	std	Y+7, r24	; 0x07
    1b76:	98 87       	std	Y+8, r25	; 0x08
    1b78:	a9 87       	std	Y+9, r26	; 0x09
    1b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <LCD_init+0x7a>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <LCD_init+0xda>
    1be0:	89 e1       	ldi	r24, 0x19	; 25
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_init+0xc8>
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <LCD_init+0xbc>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_init+0x104>
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	6f ef       	ldi	r22, 0xFF	; 255
    1c34:	0e 94 31 0b 	call	0x1662	; 0x1662 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1c38:	88 e3       	ldi	r24, 0x38	; 56
    1c3a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c3e:	8c e0       	ldi	r24, 0x0C	; 12
    1c40:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_sendCommand>
}
    1c4a:	2e 96       	adiw	r28, 0x0e	; 14
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	e9 97       	sbiw	r28, 0x39	; 57
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	8d ab       	std	Y+53, r24	; 0x35
    1c86:	9e ab       	std	Y+54, r25	; 0x36
    1c88:	af ab       	std	Y+55, r26	; 0x37
    1c8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c90:	8f a9       	ldd	r24, Y+55	; 0x37
    1c92:	98 ad       	ldd	r25, Y+56	; 0x38
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a e7       	ldi	r20, 0x7A	; 122
    1c9a:	53 e4       	ldi	r21, 0x43	; 67
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	89 ab       	std	Y+49, r24	; 0x31
    1ca6:	9a ab       	std	Y+50, r25	; 0x32
    1ca8:	ab ab       	std	Y+51, r26	; 0x33
    1caa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cac:	69 a9       	ldd	r22, Y+49	; 0x31
    1cae:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_sendCommand+0x72>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	98 ab       	std	Y+48, r25	; 0x30
    1cca:	8f a7       	std	Y+47, r24	; 0x2f
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1cce:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cea:	8f a9       	ldd	r24, Y+55	; 0x37
    1cec:	98 ad       	ldd	r25, Y+56	; 0x38
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	98 ab       	std	Y+48, r25	; 0x30
    1d0c:	8f a7       	std	Y+47, r24	; 0x2f
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_sendCommand+0xd2>
    1d10:	89 e1       	ldi	r24, 0x19	; 25
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9e a7       	std	Y+46, r25	; 0x2e
    1d16:	8d a7       	std	Y+45, r24	; 0x2d
    1d18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_sendCommand+0xc0>
    1d20:	9e a7       	std	Y+46, r25	; 0x2e
    1d22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d26:	98 a9       	ldd	r25, Y+48	; 0x30
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	98 ab       	std	Y+48, r25	; 0x30
    1d2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d30:	98 a9       	ldd	r25, Y+48	; 0x30
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_sendCommand+0xb4>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	98 ab       	std	Y+48, r25	; 0x30
    1d4a:	8f a7       	std	Y+47, r24	; 0x2f
    1d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d50:	9c a7       	std	Y+44, r25	; 0x2c
    1d52:	8b a7       	std	Y+43, r24	; 0x2b
    1d54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_sendCommand+0xfc>
    1d5c:	9c a7       	std	Y+44, r25	; 0x2c
    1d5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	62 e0       	ldi	r22, 0x02	; 2
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	bf e3       	ldi	r27, 0x3F	; 63
    1d72:	8f a3       	std	Y+39, r24	; 0x27
    1d74:	98 a7       	std	Y+40, r25	; 0x28
    1d76:	a9 a7       	std	Y+41, r26	; 0x29
    1d78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a e7       	ldi	r20, 0x7A	; 122
    1d88:	53 e4       	ldi	r21, 0x43	; 67
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8b a3       	std	Y+35, r24	; 0x23
    1d94:	9c a3       	std	Y+36, r25	; 0x24
    1d96:	ad a3       	std	Y+37, r26	; 0x25
    1d98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1da0:	9e a1       	ldd	r25, Y+38	; 0x26
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_sendCommand+0x160>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9a a3       	std	Y+34, r25	; 0x22
    1db8:	89 a3       	std	Y+33, r24	; 0x21
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd6:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9a a3       	std	Y+34, r25	; 0x22
    1dfa:	89 a3       	std	Y+33, r24	; 0x21
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_sendCommand+0x1c0>
    1dfe:	89 e1       	ldi	r24, 0x19	; 25
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	98 a3       	std	Y+32, r25	; 0x20
    1e04:	8f 8f       	std	Y+31, r24	; 0x1f
    1e06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e08:	98 a1       	ldd	r25, Y+32	; 0x20
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_sendCommand+0x1ae>
    1e0e:	98 a3       	std	Y+32, r25	; 0x20
    1e10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9a a3       	std	Y+34, r25	; 0x22
    1e1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_sendCommand+0x1a2>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6b a1       	ldd	r22, Y+35	; 0x23
    1e28:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
    1e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e40:	8d 8f       	std	Y+29, r24	; 0x1d
    1e42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_sendCommand+0x1ea>
    1e4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	69 ad       	ldd	r22, Y+57	; 0x39
    1e52:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <GPIO_writePort>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	89 8f       	std	Y+25, r24	; 0x19
    1e60:	9a 8f       	std	Y+26, r25	; 0x1a
    1e62:	ab 8f       	std	Y+27, r26	; 0x1b
    1e64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	69 8d       	ldd	r22, Y+25	; 0x19
    1e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	53 e4       	ldi	r21, 0x43	; 67
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8d 8b       	std	Y+21, r24	; 0x15
    1e80:	9e 8b       	std	Y+22, r25	; 0x16
    1e82:	af 8b       	std	Y+23, r26	; 0x17
    1e84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e86:	6d 89       	ldd	r22, Y+21	; 0x15
    1e88:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1eac:	8f 89       	ldd	r24, Y+23	; 0x17
    1eae:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9c 8b       	std	Y+20, r25	; 0x14
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_sendCommand+0x2ac>
    1eea:	89 e1       	ldi	r24, 0x19	; 25
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9a 8b       	std	Y+18, r25	; 0x12
    1ef0:	89 8b       	std	Y+17, r24	; 0x11
    1ef2:	89 89       	ldd	r24, Y+17	; 0x11
    1ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_sendCommand+0x29a>
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9c 8b       	std	Y+20, r25	; 0x14
    1f06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_sendCommand+0x28e>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6d 89       	ldd	r22, Y+21	; 0x15
    1f14:	7e 89       	ldd	r23, Y+22	; 0x16
    1f16:	8f 89       	ldd	r24, Y+23	; 0x17
    1f18:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	98 8b       	std	Y+16, r25	; 0x10
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f
    1f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f30:	98 89       	ldd	r25, Y+16	; 0x10
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_sendCommand+0x2d6>
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	62 e0       	ldi	r22, 0x02	; 2
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e8       	ldi	r26, 0x80	; 128
    1f4a:	bf e3       	ldi	r27, 0x3F	; 63
    1f4c:	8b 87       	std	Y+11, r24	; 0x0b
    1f4e:	9c 87       	std	Y+12, r25	; 0x0c
    1f50:	ad 87       	std	Y+13, r26	; 0x0d
    1f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a e7       	ldi	r20, 0x7A	; 122
    1f62:	53 e4       	ldi	r21, 0x43	; 67
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8f 83       	std	Y+7, r24	; 0x07
    1f6e:	98 87       	std	Y+8, r25	; 0x08
    1f70:	a9 87       	std	Y+9, r26	; 0x09
    1f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f74:	6f 81       	ldd	r22, Y+7	; 0x07
    1f76:	78 85       	ldd	r23, Y+8	; 0x08
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <LCD_sendCommand+0x39a>
    1fd8:	89 e1       	ldi	r24, 0x19	; 25
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_sendCommand+0x388>
    1fe8:	9c 83       	std	Y+4, r25	; 0x04
    1fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <LCD_sendCommand+0x37c>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_sendCommand+0x3c4>
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2028:	e9 96       	adiw	r28, 0x39	; 57
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	e9 97       	sbiw	r28, 0x39	; 57
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a0 e8       	ldi	r26, 0x80	; 128
    2060:	bf e3       	ldi	r27, 0x3F	; 63
    2062:	8d ab       	std	Y+53, r24	; 0x35
    2064:	9e ab       	std	Y+54, r25	; 0x36
    2066:	af ab       	std	Y+55, r26	; 0x37
    2068:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	6d a9       	ldd	r22, Y+53	; 0x35
    206c:	7e a9       	ldd	r23, Y+54	; 0x36
    206e:	8f a9       	ldd	r24, Y+55	; 0x37
    2070:	98 ad       	ldd	r25, Y+56	; 0x38
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	53 e4       	ldi	r21, 0x43	; 67
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	89 ab       	std	Y+49, r24	; 0x31
    2084:	9a ab       	std	Y+50, r25	; 0x32
    2086:	ab ab       	std	Y+51, r26	; 0x33
    2088:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	2c f4       	brge	.+10     	; 0x20ac <LCD_displayCharacter+0x72>
		__ticks = 1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	98 ab       	std	Y+48, r25	; 0x30
    20a8:	8f a7       	std	Y+47, r24	; 0x2f
    20aa:	3f c0       	rjmp	.+126    	; 0x212a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    20ac:	69 a9       	ldd	r22, Y+49	; 0x31
    20ae:	7a a9       	ldd	r23, Y+50	; 0x32
    20b0:	8b a9       	ldd	r24, Y+51	; 0x33
    20b2:	9c a9       	ldd	r25, Y+52	; 0x34
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3f ef       	ldi	r19, 0xFF	; 255
    20b8:	4f e7       	ldi	r20, 0x7F	; 127
    20ba:	57 e4       	ldi	r21, 0x47	; 71
    20bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c0:	18 16       	cp	r1, r24
    20c2:	4c f5       	brge	.+82     	; 0x2116 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c4:	6d a9       	ldd	r22, Y+53	; 0x35
    20c6:	7e a9       	ldd	r23, Y+54	; 0x36
    20c8:	8f a9       	ldd	r24, Y+55	; 0x37
    20ca:	98 ad       	ldd	r25, Y+56	; 0x38
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	98 ab       	std	Y+48, r25	; 0x30
    20ea:	8f a7       	std	Y+47, r24	; 0x2f
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <LCD_displayCharacter+0xd2>
    20ee:	89 e1       	ldi	r24, 0x19	; 25
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9e a7       	std	Y+46, r25	; 0x2e
    20f4:	8d a7       	std	Y+45, r24	; 0x2d
    20f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    20f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_displayCharacter+0xc0>
    20fe:	9e a7       	std	Y+46, r25	; 0x2e
    2100:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	8f a5       	ldd	r24, Y+47	; 0x2f
    2104:	98 a9       	ldd	r25, Y+48	; 0x30
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	98 ab       	std	Y+48, r25	; 0x30
    210a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210c:	8f a5       	ldd	r24, Y+47	; 0x2f
    210e:	98 a9       	ldd	r25, Y+48	; 0x30
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	69 f7       	brne	.-38     	; 0x20ee <LCD_displayCharacter+0xb4>
    2114:	14 c0       	rjmp	.+40     	; 0x213e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	69 a9       	ldd	r22, Y+49	; 0x31
    2118:	7a a9       	ldd	r23, Y+50	; 0x32
    211a:	8b a9       	ldd	r24, Y+51	; 0x33
    211c:	9c a9       	ldd	r25, Y+52	; 0x34
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	98 ab       	std	Y+48, r25	; 0x30
    2128:	8f a7       	std	Y+47, r24	; 0x2f
    212a:	8f a5       	ldd	r24, Y+47	; 0x2f
    212c:	98 a9       	ldd	r25, Y+48	; 0x30
    212e:	9c a7       	std	Y+44, r25	; 0x2c
    2130:	8b a7       	std	Y+43, r24	; 0x2b
    2132:	8b a5       	ldd	r24, Y+43	; 0x2b
    2134:	9c a5       	ldd	r25, Y+44	; 0x2c
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_displayCharacter+0xfc>
    213a:	9c a7       	std	Y+44, r25	; 0x2c
    213c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e8       	ldi	r26, 0x80	; 128
    214e:	bf e3       	ldi	r27, 0x3F	; 63
    2150:	8f a3       	std	Y+39, r24	; 0x27
    2152:	98 a7       	std	Y+40, r25	; 0x28
    2154:	a9 a7       	std	Y+41, r26	; 0x29
    2156:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6f a1       	ldd	r22, Y+39	; 0x27
    215a:	78 a5       	ldd	r23, Y+40	; 0x28
    215c:	89 a5       	ldd	r24, Y+41	; 0x29
    215e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a e7       	ldi	r20, 0x7A	; 122
    2166:	53 e4       	ldi	r21, 0x43	; 67
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8b a3       	std	Y+35, r24	; 0x23
    2172:	9c a3       	std	Y+36, r25	; 0x24
    2174:	ad a3       	std	Y+37, r26	; 0x25
    2176:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2178:	6b a1       	ldd	r22, Y+35	; 0x23
    217a:	7c a1       	ldd	r23, Y+36	; 0x24
    217c:	8d a1       	ldd	r24, Y+37	; 0x25
    217e:	9e a1       	ldd	r25, Y+38	; 0x26
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9a a3       	std	Y+34, r25	; 0x22
    2196:	89 a3       	std	Y+33, r24	; 0x21
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    219a:	6b a1       	ldd	r22, Y+35	; 0x23
    219c:	7c a1       	ldd	r23, Y+36	; 0x24
    219e:	8d a1       	ldd	r24, Y+37	; 0x25
    21a0:	9e a1       	ldd	r25, Y+38	; 0x26
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6f a1       	ldd	r22, Y+39	; 0x27
    21b4:	78 a5       	ldd	r23, Y+40	; 0x28
    21b6:	89 a5       	ldd	r24, Y+41	; 0x29
    21b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9a a3       	std	Y+34, r25	; 0x22
    21d8:	89 a3       	std	Y+33, r24	; 0x21
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <LCD_displayCharacter+0x1c0>
    21dc:	89 e1       	ldi	r24, 0x19	; 25
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	98 a3       	std	Y+32, r25	; 0x20
    21e2:	8f 8f       	std	Y+31, r24	; 0x1f
    21e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e6:	98 a1       	ldd	r25, Y+32	; 0x20
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_displayCharacter+0x1ae>
    21ec:	98 a3       	std	Y+32, r25	; 0x20
    21ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	89 a1       	ldd	r24, Y+33	; 0x21
    21f2:	9a a1       	ldd	r25, Y+34	; 0x22
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9a a3       	std	Y+34, r25	; 0x22
    21f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	89 a1       	ldd	r24, Y+33	; 0x21
    21fc:	9a a1       	ldd	r25, Y+34	; 0x22
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <LCD_displayCharacter+0x1a2>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6b a1       	ldd	r22, Y+35	; 0x23
    2206:	7c a1       	ldd	r23, Y+36	; 0x24
    2208:	8d a1       	ldd	r24, Y+37	; 0x25
    220a:	9e a1       	ldd	r25, Y+38	; 0x26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9a a3       	std	Y+34, r25	; 0x22
    2216:	89 a3       	std	Y+33, r24	; 0x21
    2218:	89 a1       	ldd	r24, Y+33	; 0x21
    221a:	9a a1       	ldd	r25, Y+34	; 0x22
    221c:	9e 8f       	std	Y+30, r25	; 0x1e
    221e:	8d 8f       	std	Y+29, r24	; 0x1d
    2220:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2222:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_displayCharacter+0x1ea>
    2228:	9e 8f       	std	Y+30, r25	; 0x1e
    222a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	69 ad       	ldd	r22, Y+57	; 0x39
    2230:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <GPIO_writePort>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e8       	ldi	r26, 0x80	; 128
    223a:	bf e3       	ldi	r27, 0x3F	; 63
    223c:	89 8f       	std	Y+25, r24	; 0x19
    223e:	9a 8f       	std	Y+26, r25	; 0x1a
    2240:	ab 8f       	std	Y+27, r26	; 0x1b
    2242:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	69 8d       	ldd	r22, Y+25	; 0x19
    2246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a e7       	ldi	r20, 0x7A	; 122
    2252:	53 e4       	ldi	r21, 0x43	; 67
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8d 8b       	std	Y+21, r24	; 0x15
    225e:	9e 8b       	std	Y+22, r25	; 0x16
    2260:	af 8b       	std	Y+23, r26	; 0x17
    2262:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2264:	6d 89       	ldd	r22, Y+21	; 0x15
    2266:	7e 89       	ldd	r23, Y+22	; 0x16
    2268:	8f 89       	ldd	r24, Y+23	; 0x17
    226a:	98 8d       	ldd	r25, Y+24	; 0x18
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 8b       	std	Y+20, r25	; 0x14
    2282:	8b 8b       	std	Y+19, r24	; 0x13
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2286:	6d 89       	ldd	r22, Y+21	; 0x15
    2288:	7e 89       	ldd	r23, Y+22	; 0x16
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	69 8d       	ldd	r22, Y+25	; 0x19
    22a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_displayCharacter+0x2ac>
    22c8:	89 e1       	ldi	r24, 0x19	; 25
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9a 8b       	std	Y+18, r25	; 0x12
    22ce:	89 8b       	std	Y+17, r24	; 0x11
    22d0:	89 89       	ldd	r24, Y+17	; 0x11
    22d2:	9a 89       	ldd	r25, Y+18	; 0x12
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_displayCharacter+0x29a>
    22d8:	9a 8b       	std	Y+18, r25	; 0x12
    22da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8b 89       	ldd	r24, Y+19	; 0x13
    22de:	9c 89       	ldd	r25, Y+20	; 0x14
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9c 8b       	std	Y+20, r25	; 0x14
    22e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_displayCharacter+0x28e>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6d 89       	ldd	r22, Y+21	; 0x15
    22f2:	7e 89       	ldd	r23, Y+22	; 0x16
    22f4:	8f 89       	ldd	r24, Y+23	; 0x17
    22f6:	98 8d       	ldd	r25, Y+24	; 0x18
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9c 8b       	std	Y+20, r25	; 0x14
    2302:	8b 8b       	std	Y+19, r24	; 0x13
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	98 8b       	std	Y+16, r25	; 0x10
    230a:	8f 87       	std	Y+15, r24	; 0x0f
    230c:	8f 85       	ldd	r24, Y+15	; 0x0f
    230e:	98 89       	ldd	r25, Y+16	; 0x10
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_displayCharacter+0x2d6>
    2314:	98 8b       	std	Y+16, r25	; 0x10
    2316:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 5f 0c 	call	0x18be	; 0x18be <GPIO_writePin>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 e8       	ldi	r26, 0x80	; 128
    2328:	bf e3       	ldi	r27, 0x3F	; 63
    232a:	8b 87       	std	Y+11, r24	; 0x0b
    232c:	9c 87       	std	Y+12, r25	; 0x0c
    232e:	ad 87       	std	Y+13, r26	; 0x0d
    2330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2332:	6b 85       	ldd	r22, Y+11	; 0x0b
    2334:	7c 85       	ldd	r23, Y+12	; 0x0c
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a e7       	ldi	r20, 0x7A	; 122
    2340:	53 e4       	ldi	r21, 0x43	; 67
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	8f 83       	std	Y+7, r24	; 0x07
    234c:	98 87       	std	Y+8, r25	; 0x08
    234e:	a9 87       	std	Y+9, r26	; 0x09
    2350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	2c f4       	brge	.+10     	; 0x2374 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2374:	6f 81       	ldd	r22, Y+7	; 0x07
    2376:	78 85       	ldd	r23, Y+8	; 0x08
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	4c f5       	brge	.+82     	; 0x23de <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238c:	6b 85       	ldd	r22, Y+11	; 0x0b
    238e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2390:	8d 85       	ldd	r24, Y+13	; 0x0d
    2392:	9e 85       	ldd	r25, Y+14	; 0x0e
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <LCD_displayCharacter+0x39a>
    23b6:	89 e1       	ldi	r24, 0x19	; 25
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9c 83       	std	Y+4, r25	; 0x04
    23bc:	8b 83       	std	Y+3, r24	; 0x03
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <LCD_displayCharacter+0x388>
    23c6:	9c 83       	std	Y+4, r25	; 0x04
    23c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	69 f7       	brne	.-38     	; 0x23b6 <LCD_displayCharacter+0x37c>
    23dc:	14 c0       	rjmp	.+40     	; 0x2406 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	9a 81       	ldd	r25, Y+2	; 0x02
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_displayCharacter+0x3c4>
    2402:	9a 83       	std	Y+2, r25	; 0x02
    2404:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2406:	e9 96       	adiw	r28, 0x39	; 57
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	00 d0       	rcall	.+0      	; 0x241e <LCD_displayString+0x6>
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	9b 83       	std	Y+3, r25	; 0x03
    2426:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2428:	19 82       	std	Y+1, r1	; 0x01
    242a:	0e c0       	rjmp	.+28     	; 0x2448 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	9b 81       	ldd	r25, Y+3	; 0x03
    2436:	fc 01       	movw	r30, r24
    2438:	e2 0f       	add	r30, r18
    243a:	f3 1f       	adc	r31, r19
    243c:	80 81       	ld	r24, Z
    243e:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_displayCharacter>
		i++;
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	8f 5f       	subi	r24, 0xFF	; 255
    2446:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	fc 01       	movw	r30, r24
    2454:	e2 0f       	add	r30, r18
    2456:	f3 1f       	adc	r31, r19
    2458:	80 81       	ld	r24, Z
    245a:	88 23       	and	r24, r24
    245c:	39 f7       	brne	.-50     	; 0x242c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <LCD_moveCursor+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <LCD_moveCursor+0x8>
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	8a 83       	std	Y+2, r24	; 0x02
    247a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	3d 83       	std	Y+5, r19	; 0x05
    2484:	2c 83       	std	Y+4, r18	; 0x04
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
    248a:	81 30       	cpi	r24, 0x01	; 1
    248c:	91 05       	cpc	r25, r1
    248e:	c1 f0       	breq	.+48     	; 0x24c0 <LCD_moveCursor+0x56>
    2490:	2c 81       	ldd	r18, Y+4	; 0x04
    2492:	3d 81       	ldd	r19, Y+5	; 0x05
    2494:	22 30       	cpi	r18, 0x02	; 2
    2496:	31 05       	cpc	r19, r1
    2498:	2c f4       	brge	.+10     	; 0x24a4 <LCD_moveCursor+0x3a>
    249a:	8c 81       	ldd	r24, Y+4	; 0x04
    249c:	9d 81       	ldd	r25, Y+5	; 0x05
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	61 f0       	breq	.+24     	; 0x24ba <LCD_moveCursor+0x50>
    24a2:	19 c0       	rjmp	.+50     	; 0x24d6 <LCD_moveCursor+0x6c>
    24a4:	2c 81       	ldd	r18, Y+4	; 0x04
    24a6:	3d 81       	ldd	r19, Y+5	; 0x05
    24a8:	22 30       	cpi	r18, 0x02	; 2
    24aa:	31 05       	cpc	r19, r1
    24ac:	69 f0       	breq	.+26     	; 0x24c8 <LCD_moveCursor+0x5e>
    24ae:	8c 81       	ldd	r24, Y+4	; 0x04
    24b0:	9d 81       	ldd	r25, Y+5	; 0x05
    24b2:	83 30       	cpi	r24, 0x03	; 3
    24b4:	91 05       	cpc	r25, r1
    24b6:	61 f0       	breq	.+24     	; 0x24d0 <LCD_moveCursor+0x66>
    24b8:	0e c0       	rjmp	.+28     	; 0x24d6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	0b c0       	rjmp	.+22     	; 0x24d6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	80 5c       	subi	r24, 0xC0	; 192
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	80 5f       	subi	r24, 0xF0	; 240
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	80 5b       	subi	r24, 0xB0	; 176
    24d4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	80 68       	ori	r24, 0x80	; 128
    24da:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_sendCommand>
}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <LCD_displayStringRowColumn+0x6>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <LCD_displayStringRowColumn+0x8>
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	6a 83       	std	Y+2, r22	; 0x02
    24fe:	5c 83       	std	Y+4, r21	; 0x04
    2500:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	6a 81       	ldd	r22, Y+2	; 0x02
    2506:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayString>
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	62 97       	sbiw	r28, 0x12	; 18
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	9a 8b       	std	Y+18, r25	; 0x12
    2536:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2538:	89 89       	ldd	r24, Y+17	; 0x11
    253a:	9a 89       	ldd	r25, Y+18	; 0x12
    253c:	9e 01       	movw	r18, r28
    253e:	2f 5f       	subi	r18, 0xFF	; 255
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	b9 01       	movw	r22, r18
    2544:	4a e0       	ldi	r20, 0x0A	; 10
    2546:	50 e0       	ldi	r21, 0x00	; 0
    2548:	0e 94 a2 14 	call	0x2944	; 0x2944 <itoa>
   LCD_displayString(buff); /* Display the string */
    254c:	ce 01       	movw	r24, r28
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayString>
}
    2554:	62 96       	adiw	r28, 0x12	; 18
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_sendCommand>
}
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <LM35_init>:
/*
 * Description:
 * init the sensor's channel for the adc.
 * */
void LM35_init(void)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	28 97       	sbiw	r28, 0x08	; 8
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
	/*Some other configuration maybe implemented here */
	ADC_configType config = {ADC_INTERNAL, ADC_POLLING, ADC_PRESCALER_8};
    258e:	ce 01       	movw	r24, r28
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	9d 83       	std	Y+5, r25	; 0x05
    2594:	8c 83       	std	Y+4, r24	; 0x04
    2596:	e8 ec       	ldi	r30, 0xC8	; 200
    2598:	f1 e0       	ldi	r31, 0x01	; 1
    259a:	ff 83       	std	Y+7, r31	; 0x07
    259c:	ee 83       	std	Y+6, r30	; 0x06
    259e:	f3 e0       	ldi	r31, 0x03	; 3
    25a0:	f8 87       	std	Y+8, r31	; 0x08
    25a2:	ee 81       	ldd	r30, Y+6	; 0x06
    25a4:	ff 81       	ldd	r31, Y+7	; 0x07
    25a6:	00 80       	ld	r0, Z
    25a8:	8e 81       	ldd	r24, Y+6	; 0x06
    25aa:	9f 81       	ldd	r25, Y+7	; 0x07
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	9f 83       	std	Y+7, r25	; 0x07
    25b0:	8e 83       	std	Y+6, r24	; 0x06
    25b2:	ec 81       	ldd	r30, Y+4	; 0x04
    25b4:	fd 81       	ldd	r31, Y+5	; 0x05
    25b6:	00 82       	st	Z, r0
    25b8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ba:	9d 81       	ldd	r25, Y+5	; 0x05
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	9d 83       	std	Y+5, r25	; 0x05
    25c0:	8c 83       	std	Y+4, r24	; 0x04
    25c2:	98 85       	ldd	r25, Y+8	; 0x08
    25c4:	91 50       	subi	r25, 0x01	; 1
    25c6:	98 87       	std	Y+8, r25	; 0x08
    25c8:	e8 85       	ldd	r30, Y+8	; 0x08
    25ca:	ee 23       	and	r30, r30
    25cc:	51 f7       	brne	.-44     	; 0x25a2 <LM35_init+0x28>
	ADC_init(&config);
    25ce:	ce 01       	movw	r24, r28
    25d0:	01 96       	adiw	r24, 0x01	; 1
    25d2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <ADC_init>
}
    25d6:	28 96       	adiw	r28, 0x08	; 8
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LM35_getTemperature>:
 * Returns the temperature read by the sensor
 * possible return values :
 * a number from LM35_MIN_DEGREE -> LM35_MAX_DEGREE
 * */
uint8 LM35_getTemperature(void)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <LM35_getTemperature+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LM35_getTemperature+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
	/*Read the ADC value*/
	uint16 digitalValue = 0;
    25f4:	1b 82       	std	Y+3, r1	; 0x03
    25f6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 temperature = 0, adcDoneFlag = 0;
    25f8:	19 82       	std	Y+1, r1	; 0x01
    25fa:	1c 82       	std	Y+4, r1	; 0x04
	ADC_readChannelPolling(LM35_CHANNEL,&adcDoneFlag, &digitalValue );
    25fc:	9e 01       	movw	r18, r28
    25fe:	2c 5f       	subi	r18, 0xFC	; 252
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	ae 01       	movw	r20, r28
    2604:	4e 5f       	subi	r20, 0xFE	; 254
    2606:	5f 4f       	sbci	r21, 0xFF	; 255
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	b9 01       	movw	r22, r18
    260c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <ADC_readChannelPolling>

	/*Calculate the temperature */
	temperature = (uint8)((float32)digitalValue  * ((float32)ADC_VREF / ADC_MAX) / (LM35_V_PER_DEGREE));
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	cc 01       	movw	r24, r24
    2616:	a0 e0       	ldi	r26, 0x00	; 0
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	2a e0       	ldi	r18, 0x0A	; 10
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	44 e2       	ldi	r20, 0x24	; 36
    2630:	5b e3       	ldi	r21, 0x3B	; 59
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	2a e0       	ldi	r18, 0x0A	; 10
    2640:	37 ed       	ldi	r19, 0xD7	; 215
    2642:	43 e2       	ldi	r20, 0x23	; 35
    2644:	5c e3       	ldi	r21, 0x3C	; 60
    2646:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	89 83       	std	Y+1, r24	; 0x01
	/*Return the value */
	return temperature;
    265c:	89 81       	ldd	r24, Y+1	; 0x01
}
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <MAIN_init>:

/*
 * @brief initializes the application and it required modules
 * */
void MAIN_init(void)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62

	LM35_init();/*Temperature sensor init*/
    2674:	0e 94 bd 12 	call	0x257a	; 0x257a <LM35_init>
	LCD_init();/*LCD init*/
    2678:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_init>
	DC_MOTOR_Init();/*Fan motor init*/
    267c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DC_MOTOR_Init>

	/*initial messages on the screen*/
	LCD_displayString("Fan is ");
    2680:	8d e9       	ldi	r24, 0x9D	; 157
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayString>
	LCD_moveCursor(1,0);
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_moveCursor>
	LCD_displayString("Temp is ");
    2690:	85 ea       	ldi	r24, 0xA5	; 165
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayString>
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <MAIN_displayFanMessage>:
 * @param uint8 a_fanState indicate the current fan state
 *
 * @param uint8* a_oldFanState a pointer indicate the old(on the display) fan state
 * */
void MAIN_displayFanMessage(uint8 a_fanState, uint8 *a_oldFanState)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <MAIN_displayFanMessage+0x6>
    26a4:	0f 92       	push	r0
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	7b 83       	std	Y+3, r23	; 0x03
    26ae:	6a 83       	std	Y+2, r22	; 0x02
	if(a_fanState == *a_oldFanState)
    26b0:	ea 81       	ldd	r30, Y+2	; 0x02
    26b2:	fb 81       	ldd	r31, Y+3	; 0x03
    26b4:	90 81       	ld	r25, Z
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	98 17       	cp	r25, r24
    26ba:	f9 f0       	breq	.+62     	; 0x26fa <MAIN_displayFanMessage+0x5c>
	{
		/*if both states are equal then no need to update the LCD*/
		return;
	}
	*a_oldFanState = a_fanState;
    26bc:	ea 81       	ldd	r30, Y+2	; 0x02
    26be:	fb 81       	ldd	r31, Y+3	; 0x03
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	80 83       	st	Z, r24
	LCD_displayStringRowColumn(0,7,"   ");/*clear the LCD current fan state*/
    26c4:	2e ea       	ldi	r18, 0xAE	; 174
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	67 e0       	ldi	r22, 0x07	; 7
    26cc:	a9 01       	movw	r20, r18
    26ce:	0e 94 77 12 	call	0x24ee	; 0x24ee <LCD_displayStringRowColumn>
	LCD_moveCursor(0,7); /*back to the correct position to write the new state */
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	67 e0       	ldi	r22, 0x07	; 7
    26d6:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_moveCursor>
	if(a_fanState == FAN_OFF)
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	88 23       	and	r24, r24
    26de:	29 f4       	brne	.+10     	; 0x26ea <MAIN_displayFanMessage+0x4c>
	{
		LCD_displayString("OFF");/*Off state*/
    26e0:	82 eb       	ldi	r24, 0xB2	; 178
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayString>
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <MAIN_displayFanMessage+0x54>
	}
	else
	{
		LCD_displayString("ON ");/*on state*/
    26ea:	86 eb       	ldi	r24, 0xB6	; 182
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_displayString>
	}
	LCD_moveCursor(1,0);/*Move the cursor to the next row */
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_moveCursor>

}
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <MAIN_displayTemperatureMessage>:
 * @param uint8 a_temprature indicate the new number
 *
 * @param uint8* a_oldTemp apointer indicate the old(on the display) number
 * */
void MAIN_displayTemperatureMessage(uint8 a_temprature, uint8* a_oldTemp)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <MAIN_displayTemperatureMessage+0x6>
    270c:	0f 92       	push	r0
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	7b 83       	std	Y+3, r23	; 0x03
    2716:	6a 83       	std	Y+2, r22	; 0x02
	if(a_temprature == *a_oldTemp)
    2718:	ea 81       	ldd	r30, Y+2	; 0x02
    271a:	fb 81       	ldd	r31, Y+3	; 0x03
    271c:	90 81       	ld	r25, Z
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	98 17       	cp	r25, r24
    2722:	a1 f0       	breq	.+40     	; 0x274c <MAIN_displayTemperatureMessage+0x46>
	{
		/*if both numbers are equal then no need to update it */
		return;
	}
	*a_oldTemp = a_temprature;
    2724:	ea 81       	ldd	r30, Y+2	; 0x02
    2726:	fb 81       	ldd	r31, Y+3	; 0x03
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	80 83       	st	Z, r24
	LCD_displayStringRowColumn(1,8,"   ");/*clear the old number*/
    272c:	2e ea       	ldi	r18, 0xAE	; 174
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	68 e0       	ldi	r22, 0x08	; 8
    2734:	a9 01       	movw	r20, r18
    2736:	0e 94 77 12 	call	0x24ee	; 0x24ee <LCD_displayStringRowColumn>
	LCD_moveCursor(1,8);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	68 e0       	ldi	r22, 0x08	; 8
    273e:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_moveCursor>
	LCD_intgerToString(a_temprature);/*Write the new number*/
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_intgerToString>
}
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <MAIN_updateFanSpeed>:
 * @param uint8* a_oldSpeed a pointer to the current fan speed
 *
 * @param uint8* a_fanStatus a pointer to the fanStatus
 * */
void MAIN_updateFanSpeed(uint8 a_newSpeed, uint8* a_oldSpeed, uint8* a_fanStatus)
{
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	00 d0       	rcall	.+0      	; 0x275e <MAIN_updateFanSpeed+0x6>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <MAIN_updateFanSpeed+0x8>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	7b 83       	std	Y+3, r23	; 0x03
    276a:	6a 83       	std	Y+2, r22	; 0x02
    276c:	5d 83       	std	Y+5, r21	; 0x05
    276e:	4c 83       	std	Y+4, r20	; 0x04
	if(a_newSpeed == *a_oldSpeed)
    2770:	ea 81       	ldd	r30, Y+2	; 0x02
    2772:	fb 81       	ldd	r31, Y+3	; 0x03
    2774:	90 81       	ld	r25, Z
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	98 17       	cp	r25, r24
    277a:	61 f0       	breq	.+24     	; 0x2794 <MAIN_updateFanSpeed+0x3c>
		/*then no need to re apply the same speed */
		return;
	}

	/*if both speed are different*/
	*a_oldSpeed = a_newSpeed;/*set the fan speed to the new read speed */
    277c:	ea 81       	ldd	r30, Y+2	; 0x02
    277e:	fb 81       	ldd	r31, Y+3	; 0x03
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	80 83       	st	Z, r24

	DC_MOTOR_Rotate(FAN_DIRECTION, a_newSpeed); /*apply the new speed to the motor*/
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	69 81       	ldd	r22, Y+1	; 0x01
    2788:	0e 94 18 09 	call	0x1230	; 0x1230 <DC_MOTOR_Rotate>
	*a_fanStatus = FAN_ON;/*adjust the fan state*/
    278c:	ec 81       	ldd	r30, Y+4	; 0x04
    278e:	fd 81       	ldd	r31, Y+5	; 0x05
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 83       	st	Z, r24
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <main>:

int main(void)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <main+0x6>
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <main+0x8>
    27ac:	0f 92       	push	r0
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0, fanState = FAN_INIT,
    27b2:	1a 82       	std	Y+2, r1	; 0x02
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	8b 83       	std	Y+3, r24	; 0x03
			lcd_temparture = 0,
    27b8:	1c 82       	std	Y+4, r1	; 0x04
			fanSpeed = 0, newFanSpeed = 0;
    27ba:	1d 82       	std	Y+5, r1	; 0x05
    27bc:	19 82       	std	Y+1, r1	; 0x01

	MAIN_init();
    27be:	0e 94 36 13 	call	0x266c	; 0x266c <MAIN_init>
	
	while(1)
	{
		temperature = LM35_getTemperature();/*Read the sensor temperature*/
    27c2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LM35_getTemperature>
    27c6:	8a 83       	std	Y+2, r24	; 0x02
		MAIN_displayTemperatureMessage(temperature, &lcd_temparture); /*Display the temperature read*/
    27c8:	9e 01       	movw	r18, r28
    27ca:	2c 5f       	subi	r18, 0xFC	; 252
    27cc:	3f 4f       	sbci	r19, 0xFF	; 255
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	b9 01       	movw	r22, r18
    27d2:	0e 94 83 13 	call	0x2706	; 0x2706 <MAIN_displayTemperatureMessage>
		if(temperature < 30)
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	8e 31       	cpi	r24, 0x1E	; 30
    27da:	68 f4       	brcc	.+26     	; 0x27f6 <main+0x52>
		{
			MAIN_displayFanMessage(FALSE, &fanState);/*Turn off FAN*/
    27dc:	9e 01       	movw	r18, r28
    27de:	2d 5f       	subi	r18, 0xFD	; 253
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	b9 01       	movw	r22, r18
    27e6:	0e 94 4f 13 	call	0x269e	; 0x269e <MAIN_displayFanMessage>
			fanSpeed = 0; /*Set the current fan speed to 0*/
    27ea:	1d 82       	std	Y+5, r1	; 0x05
			DC_MOTOR_Rotate(DC_MOTOR_STOP, 0);/*stopping the motor*/
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	0e 94 18 09 	call	0x1230	; 0x1230 <DC_MOTOR_Rotate>
    27f4:	e6 cf       	rjmp	.-52     	; 0x27c2 <main+0x1e>
		}
		else
		{
			MAIN_displayFanMessage(TRUE, &fanState);/*Turn on FAN*/
    27f6:	9e 01       	movw	r18, r28
    27f8:	2d 5f       	subi	r18, 0xFD	; 253
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	b9 01       	movw	r22, r18
    2800:	0e 94 4f 13 	call	0x269e	; 0x269e <MAIN_displayFanMessage>

			/*adjust the new fan read based on the temperature*/
			if(temperature >= 120)
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	88 37       	cpi	r24, 0x78	; 120
    2808:	18 f0       	brcs	.+6      	; 0x2810 <main+0x6c>
			{
				newFanSpeed = 100;
    280a:	84 e6       	ldi	r24, 0x64	; 100
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	11 c0       	rjmp	.+34     	; 0x2832 <main+0x8e>
			}
			else if(temperature >= 90)
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	8a 35       	cpi	r24, 0x5A	; 90
    2814:	18 f0       	brcs	.+6      	; 0x281c <main+0x78>
			{
				newFanSpeed = 75;
    2816:	8b e4       	ldi	r24, 0x4B	; 75
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	0b c0       	rjmp	.+22     	; 0x2832 <main+0x8e>
			}
			else if(temperature >= 60)
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	8c 33       	cpi	r24, 0x3C	; 60
    2820:	18 f0       	brcs	.+6      	; 0x2828 <main+0x84>
			{
				newFanSpeed = 50;
    2822:	82 e3       	ldi	r24, 0x32	; 50
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	05 c0       	rjmp	.+10     	; 0x2832 <main+0x8e>
			}
			else if(temperature >= 30)
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	8e 31       	cpi	r24, 0x1E	; 30
    282c:	10 f0       	brcs	.+4      	; 0x2832 <main+0x8e>
			{
				newFanSpeed = 25;
    282e:	89 e1       	ldi	r24, 0x19	; 25
    2830:	89 83       	std	Y+1, r24	; 0x01
			}
			MAIN_updateFanSpeed(newFanSpeed, &fanSpeed, &fanState);
    2832:	9e 01       	movw	r18, r28
    2834:	2b 5f       	subi	r18, 0xFB	; 251
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	ae 01       	movw	r20, r28
    283a:	4d 5f       	subi	r20, 0xFD	; 253
    283c:	5f 4f       	sbci	r21, 0xFF	; 255
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	b9 01       	movw	r22, r18
    2842:	0e 94 ac 13 	call	0x2758	; 0x2758 <MAIN_updateFanSpeed>
    2846:	bd cf       	rjmp	.-134    	; 0x27c2 <main+0x1e>

00002848 <PWM_Timer0_Start>:
 * @param uint8 a_dutyCycle the required duty cycle
 *
 * @return void
 * */
void PWM_Timer0_Start(uint8 a_dutyCycle)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	89 83       	std	Y+1, r24	; 0x01
	 * 64  -> 25 Duty Cycle
	 * 128 -> 50 Duty Cycle
	 * 192 -> 75 Duty Cycle
	 * 255 -> 100 Duty Cycle
	 */
	TCNT0 = 0; // Set Timer Initial Value to 0
    2854:	e2 e5       	ldi	r30, 0x52	; 82
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	10 82       	st	Z, r1

	OCR0  = a_dutyCycle; // Set Compare Value
    285a:	ec e5       	ldi	r30, 0x5C	; 92
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2862:	a7 e3       	ldi	r26, 0x37	; 55
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e7 e3       	ldi	r30, 0x37	; 55
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	88 60       	ori	r24, 0x08	; 8
    286e:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2870:	e3 e5       	ldi	r30, 0x53	; 83
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	8a e6       	ldi	r24, 0x6A	; 106
    2876:	80 83       	st	Z, r24
}
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <PWM_deInit>:

/*
 * @brief reset registers to 0
 * */
void PWM_deInit(void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2888:	e3 e5       	ldi	r30, 0x53	; 83
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	10 82       	st	Z, r1
	TCNT0 = 0;
    288e:	e2 e5       	ldi	r30, 0x52	; 82
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	10 82       	st	Z, r1
	OCR0 = 0;
    2894:	ec e5       	ldi	r30, 0x5C	; 92
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	10 82       	st	Z, r1
	DDRB = DDRB & ~(1 << PB3);
    289a:	a7 e3       	ldi	r26, 0x37	; 55
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e7 e3       	ldi	r30, 0x37	; 55
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	87 7f       	andi	r24, 0xF7	; 247
    28a6:	8c 93       	st	X, r24
}
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <__udivmodhi4>:
    28ae:	aa 1b       	sub	r26, r26
    28b0:	bb 1b       	sub	r27, r27
    28b2:	51 e1       	ldi	r21, 0x11	; 17
    28b4:	07 c0       	rjmp	.+14     	; 0x28c4 <__udivmodhi4_ep>

000028b6 <__udivmodhi4_loop>:
    28b6:	aa 1f       	adc	r26, r26
    28b8:	bb 1f       	adc	r27, r27
    28ba:	a6 17       	cp	r26, r22
    28bc:	b7 07       	cpc	r27, r23
    28be:	10 f0       	brcs	.+4      	; 0x28c4 <__udivmodhi4_ep>
    28c0:	a6 1b       	sub	r26, r22
    28c2:	b7 0b       	sbc	r27, r23

000028c4 <__udivmodhi4_ep>:
    28c4:	88 1f       	adc	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	5a 95       	dec	r21
    28ca:	a9 f7       	brne	.-22     	; 0x28b6 <__udivmodhi4_loop>
    28cc:	80 95       	com	r24
    28ce:	90 95       	com	r25
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	08 95       	ret

000028d6 <__prologue_saves__>:
    28d6:	2f 92       	push	r2
    28d8:	3f 92       	push	r3
    28da:	4f 92       	push	r4
    28dc:	5f 92       	push	r5
    28de:	6f 92       	push	r6
    28e0:	7f 92       	push	r7
    28e2:	8f 92       	push	r8
    28e4:	9f 92       	push	r9
    28e6:	af 92       	push	r10
    28e8:	bf 92       	push	r11
    28ea:	cf 92       	push	r12
    28ec:	df 92       	push	r13
    28ee:	ef 92       	push	r14
    28f0:	ff 92       	push	r15
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	ca 1b       	sub	r28, r26
    2900:	db 0b       	sbc	r29, r27
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	09 94       	ijmp

0000290e <__epilogue_restores__>:
    290e:	2a 88       	ldd	r2, Y+18	; 0x12
    2910:	39 88       	ldd	r3, Y+17	; 0x11
    2912:	48 88       	ldd	r4, Y+16	; 0x10
    2914:	5f 84       	ldd	r5, Y+15	; 0x0f
    2916:	6e 84       	ldd	r6, Y+14	; 0x0e
    2918:	7d 84       	ldd	r7, Y+13	; 0x0d
    291a:	8c 84       	ldd	r8, Y+12	; 0x0c
    291c:	9b 84       	ldd	r9, Y+11	; 0x0b
    291e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2920:	b9 84       	ldd	r11, Y+9	; 0x09
    2922:	c8 84       	ldd	r12, Y+8	; 0x08
    2924:	df 80       	ldd	r13, Y+7	; 0x07
    2926:	ee 80       	ldd	r14, Y+6	; 0x06
    2928:	fd 80       	ldd	r15, Y+5	; 0x05
    292a:	0c 81       	ldd	r16, Y+4	; 0x04
    292c:	1b 81       	ldd	r17, Y+3	; 0x03
    292e:	aa 81       	ldd	r26, Y+2	; 0x02
    2930:	b9 81       	ldd	r27, Y+1	; 0x01
    2932:	ce 0f       	add	r28, r30
    2934:	d1 1d       	adc	r29, r1
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	ed 01       	movw	r28, r26
    2942:	08 95       	ret

00002944 <itoa>:
    2944:	fb 01       	movw	r30, r22
    2946:	9f 01       	movw	r18, r30
    2948:	e8 94       	clt
    294a:	42 30       	cpi	r20, 0x02	; 2
    294c:	c4 f0       	brlt	.+48     	; 0x297e <itoa+0x3a>
    294e:	45 32       	cpi	r20, 0x25	; 37
    2950:	b4 f4       	brge	.+44     	; 0x297e <itoa+0x3a>
    2952:	4a 30       	cpi	r20, 0x0A	; 10
    2954:	29 f4       	brne	.+10     	; 0x2960 <itoa+0x1c>
    2956:	97 fb       	bst	r25, 7
    2958:	1e f4       	brtc	.+6      	; 0x2960 <itoa+0x1c>
    295a:	90 95       	com	r25
    295c:	81 95       	neg	r24
    295e:	9f 4f       	sbci	r25, 0xFF	; 255
    2960:	64 2f       	mov	r22, r20
    2962:	77 27       	eor	r23, r23
    2964:	0e 94 57 14 	call	0x28ae	; 0x28ae <__udivmodhi4>
    2968:	80 5d       	subi	r24, 0xD0	; 208
    296a:	8a 33       	cpi	r24, 0x3A	; 58
    296c:	0c f0       	brlt	.+2      	; 0x2970 <itoa+0x2c>
    296e:	89 5d       	subi	r24, 0xD9	; 217
    2970:	81 93       	st	Z+, r24
    2972:	cb 01       	movw	r24, r22
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	a1 f7       	brne	.-24     	; 0x2960 <itoa+0x1c>
    2978:	16 f4       	brtc	.+4      	; 0x297e <itoa+0x3a>
    297a:	5d e2       	ldi	r21, 0x2D	; 45
    297c:	51 93       	st	Z+, r21
    297e:	10 82       	st	Z, r1
    2980:	c9 01       	movw	r24, r18
    2982:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <strrev>

00002986 <strrev>:
    2986:	dc 01       	movw	r26, r24
    2988:	fc 01       	movw	r30, r24
    298a:	67 2f       	mov	r22, r23
    298c:	71 91       	ld	r23, Z+
    298e:	77 23       	and	r23, r23
    2990:	e1 f7       	brne	.-8      	; 0x298a <strrev+0x4>
    2992:	32 97       	sbiw	r30, 0x02	; 2
    2994:	04 c0       	rjmp	.+8      	; 0x299e <strrev+0x18>
    2996:	7c 91       	ld	r23, X
    2998:	6d 93       	st	X+, r22
    299a:	70 83       	st	Z, r23
    299c:	62 91       	ld	r22, -Z
    299e:	ae 17       	cp	r26, r30
    29a0:	bf 07       	cpc	r27, r31
    29a2:	c8 f3       	brcs	.-14     	; 0x2996 <strrev+0x10>
    29a4:	08 95       	ret

000029a6 <_exit>:
    29a6:	f8 94       	cli

000029a8 <__stop_program>:
    29a8:	ff cf       	rjmp	.-2      	; 0x29a8 <__stop_program>
